# PROJECT DUMP: options_visualizer
# Generated: 2025-03-01 20:04:48

## PROJECT STRUCTURE

/
  - .DS_Store
  - .python-version
  - README.md
  - requirements.txt
python
  - options_data.py
  - requirements.txt
  - yahoo_finance.py
python/models
  - black_scholes.py
options_visualizer_web
  - README.md
  - app.py
  - requirements.txt
  - test_options_fetch.py
options_visualizer_web/static
options_visualizer_web/static/css
  - style.css
options_visualizer_web/static/js
  - main.js
options_visualizer_web/templates
  - index.html
options_visualizer_backend
  - README.md
  - add_ticker.py
  - app.py
  - clean_cache.py
  - requirements.txt
  - run.sh
  - test_api.py
options_visualizer_backend/cache
options_visualizer_backend/logs
options_visualizer_backend/data
  - tickers.csv
debug
  - error_log.txt
  - test_fetch.log
  - web_app.log
debug/logs
  - web_app.log


## FILE CONTENTS


### .DS_Store [BINARY FILE - CONTENT SKIPPED]

### .python-version
```
development
```

### README.md
```
# Options Chain Visualizer - Web App

A web application for visualizing stock options data fetched from Yahoo Finance. This tool allows you to:
- View call and put options prices across different strike prices
- Toggle between different metrics (Spot Price, Last Price, Bid/Ask, Volume, etc.)
- Navigate through different expiration dates
- Track values at specific strike prices with interactive crosshairs
- Compare intrinsic and extrinsic option values

## Installation Steps

1. **Install Python**
   - Visit [python.org](https://python.org/downloads)
   - Download and install Python 3.11 or newer
   - During installation, make sure to check "Add Python to PATH"

2. **Download this Repository**
   - Click the green "Code" button above
   - Select "Download ZIP"
   - Extract the ZIP file to a folder on your computer
   - Or if you have git installed, run:
     ```
     git clone https://github.com/your-username/options-visualizer.git
     ```

3. **Install Required Packages**
   - Open a terminal/command prompt
   - Navigate to the extracted folder:
     ```
     cd path/to/options-visualizer
     ```
   - Install requirements:
     ```
     pip install -r requirements.txt
     ```

4. **Run the Web Application**
   - In the same terminal, run:
     ```
     cd options_visualizer_web
     python app.py
     ```
   - The web application will start and be available at http://localhost:5001

## Using the Web Application

- Enter a stock symbol in the search box and click "Search"
- The application will fetch and display options data for the symbol
- Use the expiration date selector to navigate between different expiration dates
- The current stock price is shown as a vertical green dashed line
- Calls are shown in blue, puts in red
- Data loads progressively, allowing you to see partial results while fetching continues

## Data Source

This application fetches real-time options data from Yahoo Finance using the `yfinance` package. The data includes:
- Strike prices
- Bid/Ask prices
- Last price
- Volume and Open Interest
- Calculated values like intrinsic/extrinsic value

## Features

- **Progressive Loading**: Data loads incrementally, showing partial results while fetching continues
- **Complete Data Fetching**: Loads all available expiration dates without time limits
- **Interactive Visualization**: Hover over the chart to see exact values
- **Multiple Metrics**: View different aspects of options data (price, volume, etc.)
- **Expiration Navigation**: Easily switch between different expiration dates
- **Performance Optimized**: Efficient rendering and throttled updates for smooth operation
- **Black-Scholes Model**: Includes calculations for option pricing and Greeks

## Troubleshooting

If you encounter any issues:
1. Make sure you have an internet connection (required for data fetching)
2. Verify Python is installed correctly: `python --version`
3. Try reinstalling requirements: `pip install -r requirements.txt --force-reinstall`
4. Check the error logs in the `debug` directory
5. For rate limit errors, try again later as Yahoo Finance may have rate limits

## Notes

- Data is fetched in real-time from Yahoo Finance
- Market data is only available during market hours
- Some stocks might have limited options data available
- The application will load all available expiration dates for a ticker
- The progressive loading feature allows you to see and interact with partial data while more is being fetched
```

### requirements.txt
```
# This is a convenience file that points to the main requirements file
# Install with: pip install -r requirements.txt

# Web App Dependencies
flask>=2.3.3
yfinance>=0.2.36
pandas>=2.1.1
numpy>=1.26.0
xarray>=2023.9.0
scipy>=1.11.3
matplotlib>=3.8.0
python-dateutil>=2.8.0 
```

### python/options_data.py
```
import pandas as pd
import numpy as np
import xarray as xr
from scipy.interpolate import griddata
from datetime import datetime
import logging
import traceback
import os
import time
import threading
from typing import Dict, Optional, Callable, Tuple, List, Any

# Import the finance API and models
from python.yahoo_finance import YahooFinanceAPI
from python.models.black_scholes import (
    call_price, put_price, delta, gamma, theta, vega, rho, implied_volatility
)

# Set up logger
logger = logging.getLogger(__name__)

# Clear error logs if they exist
log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'debug', 'logs')
if not os.path.exists(log_dir):
    os.makedirs(log_dir)
error_log = os.path.join(log_dir, 'error_log.txt')
if os.path.exists(error_log):
    with open(error_log, 'w') as f:
        f.write(f"=== New session started at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n")

class OptionsDataManager:
    """Central manager for options data handling."""
    DATA_SOURCE_YAHOO = "yahoo"
    MODEL_BLACK_SCHOLES = "black_scholes"
    MODEL_MARKET = "market"

    def __init__(self, data_source=DATA_SOURCE_YAHOO, pricing_model=MODEL_MARKET, cache_duration=600):
        logger.info(f"Initializing OptionsDataManager with source={data_source}, model={pricing_model}")
        self.data_source = data_source
        self.pricing_model = pricing_model
        self.cache_duration = cache_duration
        self.api = YahooFinanceAPI(cache_duration=cache_duration) if data_source == self.DATA_SOURCE_YAHOO else None
        self._processor_cache = {}
        self._loading_state = {}
        self._fetch_locks = {}

    def get_current_processor(self, ticker: str) -> Tuple[Optional['OptionsDataProcessor'], Optional[float], str, float]:
        """Get the current processor from cache with its status."""
        if ticker in self._processor_cache:
            processor, price, timestamp = self._processor_cache[ticker]
            if time.time() - timestamp < self.cache_duration:
                if ticker in self._loading_state:
                    loading_state = self._loading_state[ticker]
                    processed_dates = loading_state.get('last_processed_dates', 0)
                    total_dates = loading_state.get('total_dates', 0)
                    status = 'partial'
                    progress = (processed_dates / total_dates) * 100 if total_dates > 0 else 0
                else:
                    status = 'complete'
                    progress = 100
                return processor, price, status, progress
        return None, None, 'not_found', 0

    def start_fetching(self, ticker: str) -> bool:
        """Start fetching data in the background if not already loading.
        
        Returns:
            bool: True if fetching started, False if already in progress
        """
        # Use a lock to prevent multiple threads from starting fetches for the same ticker
        if ticker not in self._fetch_locks:
            self._fetch_locks[ticker] = threading.Lock()
            
        with self._fetch_locks[ticker]:
            if ticker in self._loading_state:
                logger.info(f"Fetch already in progress for {ticker}")
                return False
                
            self._loading_state[ticker] = {'last_processed_dates': 0, 'total_dates': 0}
            thread = threading.Thread(target=self._fetch_in_background, args=(ticker,))
            thread.daemon = True  # Make thread exit when main thread exits
            thread.start()
            logger.info(f"Started background fetch for {ticker}")
            return True

    def _fetch_in_background(self, ticker: str):
        """Fetch data in a background thread."""
        try:
            def cache_update_callback(partial_data, current_price, processed_dates, total_dates):
                if partial_data and current_price and processed_dates > 0:
                    try:
                        self._loading_state[ticker]['last_processed_dates'] = processed_dates
                        self._loading_state[ticker]['total_dates'] = total_dates
                        temp_processor = OptionsDataProcessor(partial_data, current_price)
                        self._processor_cache[ticker] = (temp_processor, current_price, time.time())
                        logger.info(f"Updated cache with partial data for {ticker} ({processed_dates}/{total_dates} dates)")
                    except Exception as e:
                        logger.error(f"Error in background cache update: {str(e)}")

            options_data, current_price = self.api.get_options_data(ticker, progress_callback=cache_update_callback)
            if options_data and current_price:
                try:
                    processor = OptionsDataProcessor(options_data, current_price)
                    self._processor_cache[ticker] = (processor, current_price, time.time())
                    logger.info(f"Completed fetching and cached data for {ticker}")
                except Exception as e:
                    logger.error(f"Error processing complete data: {str(e)}")
            else:
                logger.error(f"Failed to fetch data for {ticker}")
        except Exception as e:
            logger.error(f"Error in background fetch for {ticker}: {str(e)}")
        finally:
            # Clean up loading state when done
            if ticker in self._loading_state:
                del self._loading_state[ticker]

    def get_options_data(self, ticker: str, progress_callback: Optional[Callable[[Dict, float, int, int], None]] = None,
                         max_dates: Optional[int] = None) -> Tuple[Optional['OptionsDataProcessor'], Optional[float]]:
        """Get options data with support for immediate cache return and background fetching.
        
        This method will:
        1. Return cached data immediately if available
        2. Start a background fetch if no cache is available
        3. Call progress_callback with the current state
        
        Returns:
            Tuple of (processor, price) - may be (None, None) if no cache and fetch just started
        """
        # Check cache first
        processor, price, status, _ = self.get_current_processor(ticker)
        
        # If we have cached data (partial or complete), return it immediately
        if status != 'not_found':
            if progress_callback and processor:
                # Call progress callback with current state
                expiry_count = len(processor.get_expirations())
                total_count = self._loading_state.get(ticker, {}).get('total_dates', expiry_count)
                progress_callback(processor.options_data, price, expiry_count, total_count)
            return processor, price
            
        # No cache available, start background fetch
        self.start_fetching(ticker)
        
        # Return None to indicate fetch has started but no data available yet
        return None, None

    def get_risk_free_rate(self):
        return YahooFinanceAPI().get_risk_free_rate("^TNX")

    def calculate_option_price(self, S: float, K: float, T: float, r: float, sigma: float, option_type: str) -> float:
        if self.pricing_model == self.MODEL_BLACK_SCHOLES:
            return call_price(S, K, T, r, sigma) if option_type == 'call' else put_price(S, K, T, r, sigma)
        raise ValueError(f"Unsupported pricing model: {self.pricing_model}")

    def calculate_greeks(self, S: float, K: float, T: float, r: float, sigma: float, option_type: str) -> Dict[str, float]:
        if self.pricing_model == self.MODEL_BLACK_SCHOLES:
            return {
                'delta': delta(S, K, T, r, sigma, option_type),
                'gamma': gamma(S, K, T, r, sigma),
                'theta': theta(S, K, T, r, sigma, option_type),
                'vega': vega(S, K, T, r, sigma),
                'rho': rho(S, K, T, r, sigma, option_type)
            }
        raise ValueError(f"Unsupported pricing model: {self.pricing_model}")

    def calculate_implied_volatility(self, market_price: float, S: float, K: float, T: float, r: float, option_type: str) -> float:
        return implied_volatility(market_price, S, K, T, r, option_type)

class OptionsDataProcessor:
    """Processes raw options data into an xarray Dataset."""
    def __init__(self, options_data, current_price):
        logger.info(f"Initializing OptionsDataProcessor with current_price: {current_price}")
        self.options_data = options_data
        self.current_price = current_price
        self.min_strike = None
        self.max_strike = None
        if not options_data:
            logger.error("Failed to fetch options.")
            raise ValueError("Options data is None")
        self.ds = self.pre_process_data()
        num_dates = len(self.get_expirations())
        if num_dates == 1:
            self.interpolate_missing_values_1d()
        elif num_dates >= 2:
            self.interpolate_missing_values_2d()
        self.post_process_data()
        self.risk_free_rate = self.get_risk_free_rate()

    def pre_process_data(self):
        if not self.options_data or not self.current_price:
            logger.error("Missing required data for processing")
            return None
        logger.info(f"Processing options data with current price: {self.current_price}")
        dfs = []
        now = pd.Timestamp.now().normalize()
        for exp, data in self.options_data.items():
            exp_date = pd.to_datetime(exp).normalize()
            dte = max(0, (exp_date - now).days)
            for opt_type, df in [('call', data.get('calls', pd.DataFrame())), ('put', data.get('puts', pd.DataFrame()))]:
                if not df.empty:
                    df = df.copy()
                    df['option_type'] = opt_type
                    df['expiration'] = exp_date
                    df['DTE'] = dte
                    dfs.append(df)
        if not dfs:
            logger.error("No valid data to process")
            return None
        df = pd.concat(dfs, ignore_index=True)
        df['spot'] = (df['bid'] + df['ask']) / 2
        df['price'] = df['spot']
        mask_call = df['option_type'] == 'call'
        df.loc[mask_call, 'intrinsic_value'] = np.maximum(0, self.current_price - df.loc[mask_call, 'strike'])
        df.loc[~mask_call, 'intrinsic_value'] = np.maximum(0, df.loc[~mask_call, 'strike'] - self.current_price)
        df['extrinsic_value'] = df['price'] - df['intrinsic_value']
        self.min_strike = df['strike'].min()
        self.max_strike = df['strike'].max()
        strikes = sorted(df['strike'].unique())
        dtes = sorted(df['DTE'].unique())
        option_types = ['call', 'put']
        numeric_cols = [col for col in df.columns if col not in ['strike', 'DTE', 'option_type', 'expiration', 'contractSymbol', 'lastTradeDate', 'contractSize', 'currency'] and pd.api.types.is_numeric_dtype(df[col])]
        string_cols = ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
        data_vars = {col: (['strike', 'DTE', 'option_type'], np.full((len(strikes), len(dtes), len(option_types)), np.nan if col in numeric_cols else None, dtype=float if col in numeric_cols else object)) for col in numeric_cols + string_cols}
        ds = xr.Dataset(data_vars=data_vars, coords={'strike': strikes, 'DTE': dtes, 'option_type': option_types})
        ds.coords['expiration'] = ('DTE', np.array([df[df['DTE'] == dte]['expiration'].iloc[0] for dte in dtes], dtype='datetime64[ns]'))
        for _, row in df.iterrows():
            for col in numeric_cols:
                ds[col].loc[{'strike': row['strike'], 'DTE': row['DTE'], 'option_type': row['option_type']}] = row[col]
            for col in string_cols:
                ds[col].loc[{'strike': row['strike'], 'DTE': row['DTE'], 'option_type': row['option_type']}] = str(row[col])
        logger.info("Successfully processed options data into xarray Dataset")
        return ds

    def interpolate_missing_values_1d(self):
        if not self.ds:
            logger.error("Cannot interpolate: No dataset available")
            return
        logger.info("Starting 1D interpolation of missing values")
        numeric_vars = [var for var in self.ds.data_vars if np.issubdtype(self.ds[var].dtype, np.number)]
        dte = self.ds.DTE.values[0]
        for opt_type in ['call', 'put']:
            for variable in numeric_vars:
                if variable in ['volume', 'openInterest']:
                    continue
                da = self.ds[variable].sel(option_type=opt_type, DTE=dte)
                if da.isnull().any():
                    values = da.values
                    strikes = da.strike.values
                    valid = ~np.isnan(values)
                    if np.sum(valid) >= 2:
                        valid_indices = np.where(valid)[0]
                        start_idx, end_idx = valid_indices[0], valid_indices[-1]
                        s = pd.Series(values[start_idx:end_idx + 1], index=strikes[start_idx:end_idx + 1])
                        s_interp = s.interpolate(method='linear')
                        values[start_idx:end_idx + 1] = s_interp.values
                        self.ds[variable].loc[{'option_type': opt_type, 'DTE': dte}] = values
                        logger.info(f"1D interpolated {variable} for {opt_type} at DTE={dte}")
                    else:
                        logger.warning(f"Not enough valid points for 1D interpolation of {variable} for {opt_type}")

    def interpolate_missing_values_2d(self):
        if not self.ds:
            logger.error("Cannot interpolate: No dataset available")
            return
        logger.info("Starting 2D interpolation of missing values")
        numeric_vars = [var for var in self.ds.data_vars if np.issubdtype(self.ds[var].dtype, np.number)]
        dtes = self.ds.DTE.values
        if len(dtes) < 2:
            logger.info(f"Only {len(dtes)} DTE value(s) found, skipping 2D interpolation")
            return
        for opt_type in ['call', 'put']:
            for variable in numeric_vars:
                if variable in ['volume', 'openInterest']:
                    continue
                da = self.ds[variable].sel(option_type=opt_type)
                if da.isnull().any():
                    strikes = da.strike.values
                    strike_grid, dte_grid = np.meshgrid(strikes, dtes, indexing='ij')
                    points = np.column_stack([strike_grid.ravel(), dte_grid.ravel()])
                    values_flat = da.values.ravel()
                    non_nan = ~np.isnan(values_flat)
                    if non_nan.sum() > 3:
                        try:
                            interpolated_values = griddata(points[non_nan], values_flat[non_nan], (strike_grid, dte_grid), method='linear')
                            da.values = interpolated_values
                            logger.info(f"2D interpolated {variable} for {opt_type} using linear method")
                        except Exception as e:
                            logger.warning(f"2D linear interpolation failed for {variable} {opt_type}: {str(e)}")
                            for dte in dtes:
                                slice_1d = da.sel(DTE=dte).values
                                valid = ~np.isnan(slice_1d)
                                if np.sum(valid) >= 2:
                                    valid_indices = np.where(valid)[0]
                                    start_idx, end_idx = valid_indices[0], valid_indices[-1]
                                    s = pd.Series(slice_1d[start_idx:end_idx + 1], index=strikes[start_idx:end_idx + 1])
                                    s_interp = s.interpolate(method='linear')
                                    slice_1d[start_idx:end_idx + 1] = s_interp.values
                                    self.ds[variable].loc[{'option_type': opt_type, 'DTE': dte}] = slice_1d
                                    logger.info(f"1D fallback interpolated {variable} for {opt_type} at DTE={dte}")
                    else:
                        logger.warning(f"Not enough points ({non_nan.sum()}) for 2D interpolation of {variable} for {opt_type}")

    def apply_floors(self):
        bid_mask = (self.ds['bid'].isnull() | (self.ds['bid'] < 0.05))
        ask_mask = (self.ds['ask'].isnull() | (self.ds['ask'] < 0.05))
        self.ds['bid'] = xr.where(bid_mask, 0.05, self.ds['bid'])
        self.ds['ask'] = xr.where(ask_mask, 0.05, self.ds['ask'])
        self.ds['spot'] = (self.ds['bid'] + self.ds['ask']) / 2
        self.ds['price'] = self.ds['spot']
        self.ds['extrinsic_value'] = self.ds['price'] - self.ds['intrinsic_value']
        self.ds['extrinsic_value'] = xr.where(self.ds['extrinsic_value'] < 0, 0, self.ds['extrinsic_value'])

    def post_process_data(self):
        self.apply_floors()
        self.ds['spread'] = self.ds['ask'] - self.ds['bid']
        self.compute_delta()
        self.compute_gamma()
        self.compute_theta()

    def get_data(self):
        return self.ds if self.ds is not None else logger.error("No processed data available")

    def get_data_frame(self):
        return self.ds.to_dataframe().reset_index() if self.ds is not None else None

    def get_nearest_expiry(self):
        return pd.Timestamp(self.ds.expiration.sel(DTE=self.ds.DTE.min()).item()) if self.ds is not None else None

    def get_expirations(self):
        return [pd.Timestamp(exp) for exp in sorted(self.ds.expiration.values)] if self.ds is not None else []

    def get_strike_range(self):
        return self.min_strike, self.max_strike

    def get_data_for_expiry(self, expiry_date):
        if not self.ds:
            return None
        expiry_date = pd.Timestamp(expiry_date)
        closest_idx = np.argmin(abs(self.ds.expiration.values - np.datetime64(expiry_date)))
        closest_dte = self.ds.DTE.values[closest_idx]
        return self.ds.sel(DTE=closest_dte).to_dataframe().reset_index().dropna(subset=['price'])

    def get_risk_free_rate(self):
        return YahooFinanceAPI().get_risk_free_rate("^TNX")

    def compute_delta(self):
        delta = np.gradient(self.ds['price'].values, self.ds.strike.values, axis=0)
        self.ds['delta'] = (('strike', 'DTE', 'option_type'), delta)

    def compute_gamma(self):
        gamma = np.gradient(self.ds['delta'].values, self.ds.strike.values, axis=0)
        self.ds['gamma'] = (('strike', 'DTE', 'option_type'), gamma)

    def compute_theta(self):
        theta = -np.gradient(self.ds['price'].values, self.ds.DTE.values, axis=1)
        self.ds['theta'] = (('strike', 'DTE', 'option_type'), theta)
```

### python/requirements.txt
```
# Data manipulation and analysis
pandas>=2.0.0
numpy>=1.24.0
xarray>=2024.1.1

# Financial data and calculations
yfinance>=0.2.36
scipy>=1.12.0

# Data visualization
matplotlib>=3.8.0

# Web Framework
flask>=2.0.0
flask-cors>=4.0.0

# Date and time handling
python-dateutil>=2.8.0
pytz>=2023.3

# API requests
requests>=2.28.0

# GUI
tkinter  # Usually comes with Python installation

# Logging and system
logging

# Optional: Progress bars for long-running operations
tqdm>=4.65.0 
```

### python/yahoo_finance.py
```
import yfinance as yf
import logging
import time
from datetime import datetime
from typing import Callable, Dict, Any, Optional, Tuple
import pandas as pd

# Set up logger - Use existing logger without adding a duplicate handler
logger = logging.getLogger(__name__)

class YahooFinanceAPI:
    def __init__(self, cache_duration=60):
        self.max_retries = 3
        self.retry_delay = 2  # seconds
        self._cache = {}
        self.cache_duration = cache_duration  # Configurable cache duration

    def _get_from_cache(self, ticker):
        if ticker in self._cache:
            data, price, timestamp = self._cache[ticker]
            if time.time() - timestamp < self.cache_duration:
                logger.info(f"Using cached data for {ticker}")
                return data, price
        return None, None

    def get_risk_free_rate(self, ticker):
        """Get the risk-free rate."""
        treasury = yf.Ticker("^TNX")
        # Get the most recent yield (adjusted close price)
        risk_free_rate = treasury.history(period="1d")["Close"].iloc[-1] / 100
        return risk_free_rate

    def get_options_data(self, ticker, progress_callback: Optional[Callable[[Dict, float, int, int], None]] = None, max_dates=None):
        """
        Fetch options data for a ticker with progressive loading support
        
        Args:
            ticker: The stock ticker symbol
            progress_callback: Optional callback function that receives:
                - current_data: The data fetched so far
                - current_price: The stock's current price
                - processed_dates: Number of expiration dates processed so far
                - total_dates: Total number of expiration dates found
            max_dates: Maximum number of expiration dates to fetch (default: None, fetch all dates)
        
        Returns:
            Tuple of (options_data, current_price)
        """
        # Try to get data from cache first
        cached_data, cached_price = self._get_from_cache(ticker)
        if cached_data:
            logger.info(f"Using cached data for {ticker} with price {cached_price}")
            # Call the callback with complete cached data if provided
            if progress_callback:
                progress_callback(cached_data, cached_price, len(cached_data), len(cached_data))
            return cached_data, cached_price

        logger.info(f"Fetching fresh data for ticker: {ticker}")
        
        # Initialize variables to track partial data fetching
        options_data = {}
        current_price = None
        
        for attempt in range(self.max_retries):
            try:
                stock = yf.Ticker(ticker)
                
                # Get current price
                try:
                    info = stock.info
                    if not isinstance(info, dict):
                        logger.warning(f"Unexpected info type for {ticker}: {type(info)}")
                        # Try to get price from history as a fallback
                        hist = stock.history(period="1d")
                        if not hist.empty:
                            current_price = hist['Close'].iloc[-1]
                            logger.info(f"Got current price from history for {ticker}: {current_price}")
                        else:
                            raise ValueError("Could not get current price from history")
                    elif 'regularMarketPrice' in info:
                        current_price = info['regularMarketPrice']
                    elif 'currentPrice' in info:
                        current_price = info['currentPrice']
                    elif 'previousClose' in info:
                        # Use previous close as a last resort
                        current_price = info['previousClose']
                        logger.warning(f"Using previousClose as current price for {ticker}: {current_price}")
                    else:
                        logger.error(f"Missing price data in info for {ticker}")
                        raise ValueError("Could not get current price")
                except Exception as price_error:
                    logger.error(f"Error getting price for {ticker}: {str(price_error)}")
                    # Try to get price from history as a fallback
                    try:
                        hist = stock.history(period="1d")
                        if not hist.empty:
                            current_price = hist['Close'].iloc[-1]
                            logger.info(f"Got current price from history for {ticker}: {current_price}")
                        else:
                            raise ValueError("Could not get current price from history")
                    except Exception as hist_error:
                        logger.error(f"Error getting price from history for {ticker}: {str(hist_error)}")
                        raise ValueError("Could not get current price")
                
                logger.info(f"Got current price for {ticker}: {current_price}")
                
                # Call the progress callback with just the price if provided
                if progress_callback and current_price:
                    progress_callback({}, current_price, 0, 0)
                
                # Get options dates
                options_dates = stock.options
                if not options_dates:
                    logger.error(f"No options dates available for {ticker}")
                    raise ValueError("No options dates available")
                logger.info(f"Found {len(options_dates)} expiration dates for {ticker}")
                
                # Sort dates to prioritize near-term expirations
                sorted_dates = sorted(options_dates, key=lambda date_str: pd.to_datetime(date_str))
                
                # Limit the number of dates to fetch if max_dates is specified
                if max_dates and len(sorted_dates) > max_dates:
                    logger.info(f"Limiting to {max_dates} expiration dates (out of {len(sorted_dates)})")
                    sorted_dates = sorted_dates[:max_dates]
                
                # Get options data
                total_dates = len(sorted_dates)
                processed_dates = 0
                
                # Fetch option chains for each date
                for date in sorted_dates:
                    try:
                        opt = stock.option_chain(date)
                        if opt is None or not hasattr(opt, 'calls') or not hasattr(opt, 'puts'):
                            logger.error(f"Invalid options data for {ticker} on {date}")
                            continue
                            
                        options_data[date] = {'calls': opt.calls, 'puts': opt.puts}
                        processed_dates += 1
                        
                        # Log less frequently for better performance
                        if processed_dates % 5 == 0 or processed_dates == 1 or processed_dates == total_dates:
                            logger.info(f"Fetched {processed_dates}/{total_dates} expiration dates for {ticker}")
                        
                        # Call the progress callback if provided
                        if progress_callback and current_price:
                            # Make a copy of the data to avoid reference issues
                            callback_data = options_data.copy()
                            progress_callback(callback_data, current_price, processed_dates, total_dates)
                            
                    except Exception as e:
                        logger.error(f"Error fetching option chain for {date}: {str(e)}")
                        # Continue with other dates instead of failing completely
                        continue
                
                # Return data if we have at least one valid expiration date
                if options_data and current_price:
                    # Store both data and price in cache
                    self._cache[ticker] = (options_data, current_price, time.time())
                    logger.info(f"Successfully cached data for {ticker} with {len(options_data)} expiration dates")
                    return options_data, current_price
                else:
                    logger.error(f"No valid options data found for {ticker}")
                    raise ValueError("No valid options data found")
                
            except ValueError as e:
                logger.error(f"Data error for {ticker} on attempt {attempt + 1}: {str(e)}")
                if attempt == self.max_retries - 1:
                    # Return partial data if we have any
                    if options_data and current_price:
                        logger.warning(f"Returning partial data for {ticker} after error: {str(e)}")
                        return options_data, current_price
                    return None, None
            except Exception as e:
                logger.error(f"Unexpected error for {ticker} on attempt {attempt + 1}: {str(e)}")
                if "rate limit" in str(e).lower() or "too many requests" in str(e).lower():
                    # Wait longer for rate limit errors
                    time.sleep(self.retry_delay * 2)
                else:
                    time.sleep(self.retry_delay)
                    
        # If we get here, all retries failed
        logger.error(f"All retries failed for {ticker}")
        return None, None
```

### python/models/black_scholes.py
```
#black scholes model
import numpy as np
from scipy.stats import norm
from scipy.optimize import newton

def d1(S, K, T, r, sigma):
    """Compute d1 component of Black-Scholes formula."""
    return (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))

def d2(S, K, T, r, sigma):
    """Compute d2 component of Black-Scholes formula."""
    return d1(S, K, T, r, sigma) - sigma * np.sqrt(T)

def call_price(S, K, T, r, sigma):
    """Calculate Black-Scholes call option price."""
    d1_val = d1(S, K, T, r, sigma)
    d2_val = d2(S, K, T, r, sigma)
    return S * norm.cdf(d1_val) - K * np.exp(-r * T) * norm.cdf(d2_val)

def put_price(S, K, T, r, sigma):
    """Calculate Black-Scholes put option price."""
    d1_val = d1(S, K, T, r, sigma)
    d2_val = d2(S, K, T, r, sigma)
    return K * np.exp(-r * T) * norm.cdf(-d2_val) - S * norm.cdf(-d1_val)

def delta(S, K, T, r, sigma, option_type):
    """Calculate option Delta."""
    d1_val = d1(S, K, T, r, sigma)
    if option_type == 'call':
        return norm.cdf(d1_val)
    elif option_type == 'put':
        return norm.cdf(d1_val) - 1
    else:
        raise ValueError("option_type must be 'call' or 'put'")

def gamma(S, K, T, r, sigma):
    """Calculate option Gamma."""
    d1_val = d1(S, K, T, r, sigma)
    return norm.pdf(d1_val) / (S * sigma * np.sqrt(T))

def theta(S, K, T, r, sigma, option_type):
    """Calculate option Theta."""
    d1_val = d1(S, K, T, r, sigma)
    d2_val = d2(S, K, T, r, sigma)
    term1 = - (S * norm.pdf(d1_val) * sigma) / (2 * np.sqrt(T))
    if option_type == 'call':
        term2 = r * K * np.exp(-r * T) * norm.cdf(d2_val)
        return term1 - term2
    elif option_type == 'put':
        term2 = r * K * np.exp(-r * T) * norm.cdf(-d2_val)
        return term1 + term2
    else:
        raise ValueError("option_type must be 'call' or 'put'")

def vega(S, K, T, r, sigma):
    """Calculate option Vega."""
    d1_val = d1(S, K, T, r, sigma)
    return S * np.sqrt(T) * norm.pdf(d1_val)

def rho(S, K, T, r, sigma, option_type):
    """Calculate option Rho."""
    d2_val = d2(S, K, T, r, sigma)
    if option_type == 'call':
        return K * T * np.exp(-r * T) * norm.cdf(d2_val)
    elif option_type == 'put':
        return -K * T * np.exp(-r * T) * norm.cdf(-d2_val)
    else:
        raise ValueError("option_type must be 'call' or 'put'")

def implied_volatility(market_price, S, K, T, r, option_type, initial_guess=0.2, max_iter=100, tol=1e-6):
    """Calculate Implied Volatility using Newton-Raphson method."""
    def price_difference(sigma):
        if option_type == 'call':
            return call_price(S, K, T, r, sigma) - market_price
        elif option_type == 'put':
            return put_price(S, K, T, r, sigma) - market_price
        else:
            raise ValueError("option_type must be 'call' or 'put'")
    
    try:
        iv = newton(price_difference, initial_guess, maxiter=max_iter, tol=tol)
        return iv if iv > 0 else np.nan  # Return NaN if IV is negative
    except RuntimeError:
        return np.nan
```

### options_visualizer_web/README.md
```
# Options Visualizer Web App

A web-based application that allows you to visualize options data for any stock symbol. This application consists of a Flask backend that fetches and processes options data, and a web frontend that displays the data in interactive charts.

## Features

- Search for any stock symbol to view its options data
- Navigate between different expiration dates
- View different metrics (Spot, Bid, Ask, Volume, Intrinsic Value, Extrinsic Value)
- Interactive charts with hover functionality
- Responsive design that works on desktop and mobile

## Running the Application

1. Start the Flask server:
   ```
   cd options_visualizer_web
   python app.py
   ```

2. Open your web browser and navigate to:
   ```
   http://localhost:5001
   ```

## Hosting on Your Local Machine

To make the application accessible from anywhere:

1. **Port Forwarding**: Configure your router to forward port 80 (external) to port 5001 (internal) on your machine's local IP.

2. **Dynamic DNS**: Register with a dynamic DNS service (e.g., No-IP) to get a domain that points to your home IP address.

3. **Security**: For production use, consider adding HTTPS with Let's Encrypt and Nginx as a reverse proxy.

## Troubleshooting

- If you encounter issues with data fetching, check your internet connection and ensure you're not hitting Yahoo Finance's rate limits.
- If the application is not accessible externally, verify your port forwarding and firewall settings.

## License

This project is licensed under the MIT License - see the LICENSE file for details. 
```

### options_visualizer_web/app.py
```
import os
import sys
import json
import logging
import numpy as np
from flask import Flask, render_template, request, jsonify
from datetime import datetime
import pandas as pd

# Fix the path modification
sys.path.append(os.path.dirname(os.path.dirname(__file__)))  # Points to project root

# Import the existing modules
from python.options_data import OptionsDataManager, OptionsDataProcessor

# Configure logging
log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'debug', 'logs')
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# Clear logs on startup
log_file = os.path.join(log_dir, 'web_app.log')
if os.path.exists(log_file):
    with open(log_file, 'w') as f:
        f.write(f"=== New session started at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n")

# Configure console handler in addition to file handler
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_format)

file_handler = logging.FileHandler(log_file)
file_handler.setLevel(logging.INFO)
file_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_format)

# Configure root logger
logging.basicConfig(level=logging.INFO, handlers=[file_handler, console_handler])

logger = logging.getLogger(__name__)
logger.info("Starting Options Visualizer Web App")

# Create Flask app with explicit static folder path
static_folder = os.path.join(os.path.dirname(__file__), 'static')
template_folder = os.path.join(os.path.dirname(__file__), 'templates')
app = Flask(__name__, static_folder=static_folder, template_folder=template_folder)
logger.info(f"Static folder: {static_folder}")
logger.info(f"Template folder: {template_folder}")

# Initialize the options data manager with a longer cache duration for web app
data_manager = OptionsDataManager(cache_duration=1800)  # 30 minutes cache

@app.route('/')
def index():
    """Render the main page"""
    return render_template('index.html')

@app.route('/api/get_options_data', methods=['POST'])
def get_options_data():
    """API endpoint to fetch options data for a given symbol with immediate cache response"""
    try:
        # Get the symbol from the request
        data = request.get_json()
        if not data or 'symbol' not in data:
            return jsonify({'error': 'No symbol provided'}), 400
        
        symbol = data['symbol'].strip().upper()
        if not symbol or not symbol.isalnum():
            return jsonify({'error': 'Invalid symbol format'}), 400
        
        logger.info(f"Processing request for {symbol}")
        
        # Get current processor status from cache
        processor, current_price, status, progress = data_manager.get_current_processor(symbol)
        
        # If no data in cache, start background fetch and return loading status
        if status == 'not_found':
            data_manager.start_fetching(symbol)
            response = {
                'status': 'loading',
                'symbol': symbol,
                'progress': 0,
                'options_data': [],
                'current_price': None,
                'expiry_dates': [],
                'processed_dates': 0,
                'total_dates': 0
            }
            logger.info(f"Started background fetch for {symbol}")
            return jsonify(response)
        
        # We have data in cache (partial or complete)
        # Get the dataset as a DataFrame
        df = processor.get_data_frame()
        if df is None or df.empty:
            return jsonify({'error': f'No options data available for {symbol}'}), 404
        
        # Get all expiration dates
        expiry_dates = processor.get_expirations()
        if not expiry_dates:
            return jsonify({'error': f'No expiration dates found for {symbol}'}), 404
        
        # Convert expiry dates to string format for JSON
        expiry_dates_str = [date.strftime('%Y-%m-%d') for date in expiry_dates]
        
        # Convert datetime columns to strings
        df['expiration'] = df['expiration'].dt.strftime('%Y-%m-%d')
        
        # Replace NaN values with None (which will be converted to null in JSON)
        df = df.where(pd.notnull(df), None)
        
        # Prepare the response
        response = {
            'status': status,
            'symbol': symbol,
            'progress': progress,
            'current_price': current_price,
            'expiry_dates': expiry_dates_str,
            'options_data': df.to_dict(orient='records'),
            'min_strike': processor.min_strike,
            'max_strike': processor.max_strike,
            'processed_dates': len(expiry_dates),
            'total_dates': data_manager._loading_state.get(symbol, {}).get('total_dates', len(expiry_dates))
        }
        
        logger.info(f"Returning {status} data for {symbol} with {len(expiry_dates)} dates")
        return jsonify(response)
    
    except Exception as e:
        logger.error(f"Error processing request: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5001) 
```

### options_visualizer_web/requirements.txt
```
# Web App Dependencies
flask>=2.3.3
yfinance>=0.2.36
pandas>=2.1.1
numpy>=1.26.0
xarray>=2023.9.0
scipy>=1.11.3
matplotlib>=3.8.0
python-dateutil>=2.8.0 
```

### options_visualizer_web/test_options_fetch.py
```
#!/usr/bin/env python3
"""
Simple test script to verify options data fetching functionality.
This script focuses only on testing if we can fetch and process options data.
"""
import os
import sys
import logging
import numpy as np
from datetime import datetime

# Configure logging
log_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'debug', 'logs')
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# Clear logs on startup
log_file = os.path.join(log_dir, 'test_fetch.log')
with open(log_file, 'w') as f:
    f.write(f"=== New test session started at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n")

logging.basicConfig(
    filename=log_file,
    level=logging.DEBUG,  # Use DEBUG level for more detailed logging
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Add a console handler to see logs in real-time
console = logging.StreamHandler()
console.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console.setFormatter(formatter)
logging.getLogger('').addHandler(console)

logger = logging.getLogger('test_fetch')
logger.info("Starting Options Data Fetch Test")

# Fix the path modification
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
logger.info(f"Added to path: {os.path.dirname(os.path.dirname(os.path.abspath(__file__)))}")

try:
    logger.info("Importing OptionsDataManager and OptionsDataProcessor")
    from python.options_data import OptionsDataManager, OptionsDataProcessor
    logger.info("Successfully imported options_data modules")
except Exception as e:
    logger.error(f"Failed to import options_data modules: {str(e)}")
    sys.exit(1)

def test_fetch_options(symbol, max_dates=None):
    """Test fetching options data for a given symbol."""
    logger.info(f"=== Testing options data fetch for {symbol} with max_dates={max_dates} ===")
    
    try:
        logger.info("Initializing OptionsDataManager")
        data_manager = OptionsDataManager(cache_duration=60)
        logger.info("OptionsDataManager initialized successfully")
        
        logger.info(f"Fetching options data for {symbol}")
        processor, current_price = data_manager.get_options_data(symbol, max_dates=max_dates)
        
        if processor is None or current_price is None:
            logger.error(f"Failed to fetch data for {symbol}")
            return False
        
        logger.info(f"Successfully fetched data for {symbol} with current price: {current_price}")
        
        # Get basic information
        logger.info("Getting expiration dates")
        expiry_dates = processor.get_expirations()
        logger.info(f"Found {len(expiry_dates)} expiration dates: {expiry_dates}")
        
        logger.info("Getting strike range")
        min_strike, max_strike = processor.get_strike_range()
        logger.info(f"Strike range: {min_strike} to {max_strike}")
        
        # Get the full dataset
        logger.info("Getting full dataset as DataFrame")
        df = processor.get_data_frame()
        if df is None or df.empty:
            logger.error("DataFrame is empty or None")
            return False
        
        logger.info(f"DataFrame shape: {df.shape}")
        logger.info(f"DataFrame columns: {df.columns.tolist()}")
        
        # Check for key columns
        required_columns = ['strike', 'expiration', 'option_type', 'price', 'bid', 'ask']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            logger.error(f"Missing required columns: {missing_columns}")
            return False
        
        logger.info("All required columns are present")
        
        # Check for NaN values in key columns
        nan_counts = df[required_columns].isna().sum()
        logger.info(f"NaN counts in key columns: {nan_counts.to_dict()}")
        
        # Check for data in each option type
        call_count = df[df['option_type'] == 'call'].shape[0]
        put_count = df[df['option_type'] == 'put'].shape[0]
        logger.info(f"Found {call_count} call options and {put_count} put options")
        
        # Check for computed columns
        computed_columns = ['delta', 'gamma', 'theta', 'intrinsic_value', 'extrinsic_value']
        for col in computed_columns:
            if col in df.columns:
                logger.info(f"Column {col} is present with {df[col].notna().sum()} non-NaN values")
            else:
                logger.warning(f"Computed column {col} is missing")
        
        # Check for minimum values in spot prices (which would indicate interpolation failure)
        min_value = 0.05
        spot_values = df['spot'].values
        min_count = np.sum(np.isclose(spot_values, min_value))
        total_count = len(spot_values)
        min_percentage = (min_count / total_count) * 100 if total_count > 0 else 0
        
        logger.info(f"Spot price check: {min_count}/{total_count} values ({min_percentage:.2f}%) are at minimum value {min_value}")
        
        # If more than 50% of values are at minimum, interpolation likely failed
        if min_percentage > 50:
            logger.error("Interpolation verification failed: Too many minimum values")
            return False
        
        # Check for interpolation success flag
        if hasattr(processor, 'interpolation_successful'):
            logger.info(f"Interpolation success flag: {processor.interpolation_successful}")
            if not processor.interpolation_successful and len(expiry_dates) > 1:
                logger.error("Interpolation was not successful despite having multiple expiry dates")
                return False
        
        # Test getting data for a specific expiry date
        if expiry_dates:
            logger.info(f"Testing get_data_for_expiry with date {expiry_dates[0]}")
            expiry_df = processor.get_data_for_expiry(expiry_dates[0])
            if expiry_df is None or expiry_df.empty:
                logger.error(f"Failed to get data for expiry date {expiry_dates[0]}")
                return False
            logger.info(f"Successfully got data for expiry date {expiry_dates[0]}, shape: {expiry_df.shape}")
        
        logger.info(f"=== Successfully completed test for {symbol} ===")
        return True
        
    except Exception as e:
        logger.error(f"Error during test: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

def test_progressive_loading(symbol):
    """Test progressive loading of expiry dates and interpolation."""
    logger.info(f"=== Testing progressive loading for {symbol} ===")
    
    # Test with 1 date
    logger.info("Testing with 1 expiry date")
    success_1 = test_fetch_options(symbol, max_dates=1)
    
    # Test with 2 dates
    logger.info("Testing with 2 expiry dates")
    success_2 = test_fetch_options(symbol, max_dates=2)
    
    # Test with 3 dates
    logger.info("Testing with 3 expiry dates")
    success_3 = test_fetch_options(symbol, max_dates=3)
    
    # Test with all dates
    logger.info("Testing with all expiry dates")
    success_all = test_fetch_options(symbol)
    
    # Report results
    logger.info(f"Progressive loading test results for {symbol}:")
    logger.info(f"  1 date: {'✅ PASS' if success_1 else '❌ FAIL'}")
    logger.info(f"  2 dates: {'✅ PASS' if success_2 else '❌ FAIL'}")
    logger.info(f"  3 dates: {'✅ PASS' if success_3 else '❌ FAIL'}")
    logger.info(f"  All dates: {'✅ PASS' if success_all else '❌ FAIL'}")
    
    return success_1 and success_2 and success_3 and success_all

def main():
    """Main test function."""
    symbols_to_test = ['SPY', 'AAPL']
    
    # Test basic functionality
    for symbol in symbols_to_test:
        success = test_fetch_options(symbol)
        if success:
            logger.info(f"✅ Basic test PASSED for {symbol}")
        else:
            logger.error(f"❌ Basic test FAILED for {symbol}")
    
    # Test progressive loading
    for symbol in symbols_to_test:
        success = test_progressive_loading(symbol)
        if success:
            logger.info(f"✅ Progressive loading test PASSED for {symbol}")
        else:
            logger.error(f"❌ Progressive loading test FAILED for {symbol}")

if __name__ == "__main__":
    logger.info("Starting main test function")
    main()
    logger.info("Test completed") 
```

### options_visualizer_web/static/css/style.css
```
/* Base styles */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html, body {
    height: 100%;
    width: 100%;
    overflow: hidden;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f4f4f4;
    padding: 0;
    display: flex;
    flex-direction: column;
}

.container {
    flex: 1;
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100vh;
    margin: 0;
    background-color: #fff;
    padding: 10px;
    border-radius: 0;
    box-shadow: none;
}

header {
    text-align: center;
    margin-bottom: 10px;
    padding-bottom: 5px;
    border-bottom: 1px solid #ddd;
    flex: 0 0 auto;
}

h1 {
    color: #2c3e50;
}

/* Controls section */
.controls-section {
    flex: 0 0 auto;
    margin-bottom: 10px;
}

/* Search section */
.search-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding: 5px 0;
}

.ticker-input {
    display: flex;
    align-items: center;
}

.ticker-input label {
    margin-right: 10px;
    font-weight: bold;
}

.ticker-input input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-right: 10px;
    width: 120px;
}

.ticker-input button {
    padding: 8px 15px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.ticker-input button:hover {
    background-color: #2980b9;
}

.ticker-input button:disabled {
    background-color: #95a5a6;
    cursor: not-allowed;
}

.status {
    font-size: 0.9em;
    color: #7f8c8d;
}

/* Navigation section */
.navigation-section {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
}

.navigation-section button {
    padding: 5px 10px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.navigation-section button:hover {
    background-color: #2980b9;
}

.navigation-section button:disabled {
    background-color: #95a5a6;
    cursor: not-allowed;
}

.navigation-section span {
    margin: 0 15px;
    font-weight: bold;
    min-width: 100px;
    text-align: center;
}

/* Plot options */
.plot-options {
    margin-bottom: 20px;
}

.plot-options fieldset {
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 10px;
}

.plot-options legend {
    padding: 0 10px;
    font-weight: bold;
}

.plot-options label {
    margin-right: 15px;
    cursor: pointer;
}

/* Plot container */
#plot-container {
    flex: 1;
    width: 100%;
    min-height: 400px;
    margin-bottom: 10px;
    position: relative;
    overflow: hidden;
    border: 1px solid #ddd;
}

#options-plot {
    width: 100%;
    height: 100%;
    min-height: 400px;
}

/* Loading indicator */
#loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 255, 255, 0.9);
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    z-index: 1000;
}

.spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 2s linear infinite;
    margin-bottom: 10px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Error message */
#error-message {
    padding: 10px;
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    margin-bottom: 20px;
}

/* Utility classes */
.hidden {
    display: none !important;
} 
```

### options_visualizer_web/static/js/main.js
```
// Options Visualizer Web App - Frontend Logic

// Field mapping for plot display (matches the Python backend)
const FIELD_MAPPING = {
    "Spot": "spot",
    "Bid": "bid",
    "Ask": "ask",
    "Volume": "volume",
    "Intrinsic Value": "intrinsic_value",
    "Extrinsic Value": "extrinsic_value"
};

// Price-related fields that need dollar formatting
const PRICE_FIELDS = ["Spot", "Bid", "Ask", "Intrinsic Value", "Extrinsic Value"];

// Global state
let state = {
    symbol: "",
    currentPrice: null,
    expiryDates: [],
    currentExpiryIndex: 0,
    optionsData: [],
    lastUpdateTime: null,
    plot: null,
    hoveredStrike: null,
    isPolling: false,
    pollingInterval: null,
    lastProcessedDates: 0,
    totalDates: 0
};

// DOM elements
const elements = {
    ticker: document.getElementById('ticker'),
    searchBtn: document.getElementById('search-btn'),
    statusLabel: document.getElementById('status-label'),
    expiryLabel: document.getElementById('expiry-label'),
    prevBtn: document.getElementById('prev-btn'),
    nextBtn: document.getElementById('next-btn'),
    plotOptions: document.querySelectorAll('input[name="plot-type"]'),
    plotContainer: document.getElementById('options-plot'),
    loadingIndicator: document.getElementById('loading-indicator'),
    errorMessage: document.getElementById('error-message')
};

// Initialize the app
function init() {
    console.log("Initializing app...");
    
    // Check if Plotly is loaded
    if (typeof Plotly === 'undefined') {
        console.error("Plotly library is not loaded!");
        showError("Failed to load the plotting library. Please refresh the page or check your internet connection.");
        return;
    } else {
        console.log("Plotly library is loaded, version:", Plotly.version);
    }
    
    // Check if the plot container exists and has dimensions
    const plotContainer = elements.plotContainer;
    if (!plotContainer) {
        console.error("Plot container not found!");
    } else {
        console.log(`Plot container dimensions: ${plotContainer.offsetWidth}x${plotContainer.offsetHeight}`);
        if (plotContainer.offsetWidth === 0 || plotContainer.offsetHeight === 0) {
            console.warn("Plot container has zero dimensions, this may cause Plotly to fail");
        }
    }
    
    // Add event listeners
    elements.searchBtn.addEventListener('click', searchTicker);
    elements.ticker.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            searchTicker();
        }
    });
    elements.prevBtn.addEventListener('click', prevExpiry);
    elements.nextBtn.addEventListener('click', nextExpiry);
    
    // Add event listeners for plot type change
    elements.plotOptions.forEach(option => {
        option.addEventListener('change', updatePlot);
    });
    
    // Load default ticker (SPY)
    elements.ticker.value = 'SPY';
    console.log("Starting initial search for SPY...");
    searchTicker();
}

// Search for a ticker
function searchTicker() {
    const ticker = elements.ticker.value.trim().toUpperCase();
    console.log(`Searching for ticker: ${ticker}`);
    if (!ticker || !ticker.match(/^[A-Z0-9]+$/)) {
        showError('Invalid ticker symbol. Please enter a valid stock symbol.');
        return;
    }
    
    // Update UI state
    elements.searchBtn.disabled = true;
    showLoading(true);
    hideError();
    elements.statusLabel.textContent = `Loading ${ticker} data...`;
    
    // Stop any existing polling
    stopPolling();
    
    // Reset state
    state.lastProcessedDates = 0;
    state.totalDates = 0;
    
    // Fetch data from the API
    fetchOptionsData(ticker);
}

// Fetch options data with support for partial data
function fetchOptionsData(ticker, isPolling = false) {
    console.log(`Fetching options data for ${ticker}, polling: ${isPolling}`);
    fetch('/api/get_options_data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            symbol: ticker
        })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.error || `Failed to fetch data for ${ticker}`);
            });
        }
        return response.json();
    })
    .then(data => {
        console.log(`Received data for ${ticker}:`, data);
        
        // Update state with the new data
        state.symbol = data.symbol;
        state.currentPrice = data.current_price;
        
        // If we have options data, update the state
        if (data.options_data && data.options_data.length > 0) {
            state.expiryDates = data.expiry_dates;
            state.optionsData = data.options_data;
            
            if (state.currentExpiryIndex >= state.expiryDates.length) {
                state.currentExpiryIndex = 0;
            }
            
            // Update UI with the data we have
            updateExpiryDisplay();
            updatePlot();
        }
        
        state.lastProcessedDates = data.processed_dates;
        state.totalDates = data.total_dates;
        state.lastUpdateTime = new Date();
        
        // Update status based on whether we have partial or complete data
        const timeStr = state.lastUpdateTime.toLocaleTimeString();
        const progressStr = `${state.lastProcessedDates}/${state.totalDates} dates`;
        const progressPct = data.progress ? `${Math.round(data.progress)}%` : '0%';
        
        if (data.status === 'loading' || data.status === 'partial') {
            // Show loading indicator with progress
            elements.statusLabel.textContent = `Loading: ${progressStr} (${progressPct}) | ${timeStr}`;
            showLoading(true);
            
            // Start polling for more data if we're not already polling
            if (!state.isPolling) {
                startPolling(ticker);
            }
        } else {
            // Data is complete
            elements.statusLabel.textContent = `Updated: ${timeStr} | ${state.expiryDates.length} dates loaded`;
            stopPolling();
            showLoading(false);
        }
    })
    .catch(error => {
        console.error('Error fetching data:', error);
        showError(error.message);
        elements.statusLabel.textContent = `Error: ${error.message.substring(0, 30)}...`;
        stopPolling();
        showLoading(false);
    })
    .finally(() => {
        if (!state.isPolling) {
            elements.searchBtn.disabled = false;
        }
    });
}

// Start polling for more data
function startPolling(ticker) {
    state.isPolling = true;
    console.log(`Starting polling for ${ticker}`);
    
    // Clear any existing interval
    if (state.pollingInterval) {
        clearInterval(state.pollingInterval);
    }
    
    // Poll every 2 seconds
    state.pollingInterval = setInterval(() => {
        // If we've loaded all dates, stop polling
        if (state.lastProcessedDates >= state.totalDates && state.totalDates > 0) {
            stopPolling();
            return;
        }
        
        fetchOptionsData(ticker, true);
    }, 2000);
}

// Stop polling
function stopPolling() {
    console.log("Stopping polling");
    state.isPolling = false;
    
    if (state.pollingInterval) {
        clearInterval(state.pollingInterval);
        state.pollingInterval = null;
    }
    
    elements.searchBtn.disabled = false;
    showLoading(false);
}

// Update the expiry date display and navigation buttons
function updateExpiryDisplay() {
    console.log("Updating expiry display");
    if (!state.expiryDates || state.expiryDates.length === 0) {
        elements.expiryLabel.textContent = 'No data';
        elements.prevBtn.disabled = true;
        elements.nextBtn.disabled = true;
        return;
    }
    
    // Get current date and update label
    const currentDate = state.expiryDates[state.currentExpiryIndex];
    elements.expiryLabel.textContent = currentDate;
    
    // Update navigation buttons
    elements.prevBtn.disabled = state.currentExpiryIndex <= 0;
    elements.nextBtn.disabled = state.currentExpiryIndex >= state.expiryDates.length - 1;
}

// Navigate to previous expiry date
function prevExpiry() {
    if (state.currentExpiryIndex > 0) {
        state.currentExpiryIndex--;
        updateExpiryDisplay();
        updatePlot();
    }
}

// Navigate to next expiry date
function nextExpiry() {
    if (state.currentExpiryIndex < state.expiryDates.length - 1) {
        state.currentExpiryIndex++;
        updateExpiryDisplay();
        updatePlot();
    }
}

// Update the plot with current data
function updatePlot() {
    console.log("Updating plot");
    if (!state.optionsData || !state.expiryDates || state.expiryDates.length === 0) {
        console.error('Cannot update plot: No data available');
        return;
    }
    
    try {
        const currentDate = state.expiryDates[state.currentExpiryIndex];
        console.log(`Filtering data for date: ${currentDate}`);
        
        // Filter data for current expiry date
        const filteredData = state.optionsData.filter(item => item.expiration === currentDate);
        
        if (!filteredData || filteredData.length === 0) {
            console.warn(`No data available for expiry date ${currentDate}, trying to find another date`);
            
            // Try to find another date with data
            let foundValidDate = false;
            for (let i = 0; i < state.expiryDates.length; i++) {
                const testDate = state.expiryDates[i];
                const testData = state.optionsData.filter(item => item.expiration === testDate);
                if (testData && testData.length > 0) {
                    state.currentExpiryIndex = i;
                    updateExpiryDisplay();
                    // Call updatePlot again with the new date
                    updatePlot();
                    foundValidDate = true;
                    break;
                }
            }
            
            if (!foundValidDate) {
                console.error('No valid data found for any expiry date');
                return;
            }
            return;
        }
        
        console.log(`Found ${filteredData.length} data points for date ${currentDate}`);
        
        // Get selected plot type
        const selectedPlotType = Array.from(elements.plotOptions).find(option => option.checked).value;
        const plotField = FIELD_MAPPING[selectedPlotType];
        
        // Separate calls and puts
        const calls = filteredData.filter(item => item.option_type === 'call');
        const puts = filteredData.filter(item => item.option_type === 'put');
        
        console.log(`Calls: ${calls.length}, Puts: ${puts.length}`);
        
        // Calculate days to expiry
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const expiryDate = new Date(currentDate);
        const dte = Math.max(0, Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24)));
        
        // Filter out null values and create traces for calls and puts
        const callTrace = {
            x: calls.filter(item => item.strike !== null && item[plotField] !== null)
                 .map(item => item.strike),
            y: calls.filter(item => item.strike !== null && item[plotField] !== null)
                 .map(item => item[plotField]),
            mode: 'lines',
            name: 'Calls',
            line: { color: 'blue' },
            hoverinfo: 'x+y+name'
        };
        
        const putTrace = {
            x: puts.filter(item => item.strike !== null && item[plotField] !== null)
                .map(item => item.strike),
            y: puts.filter(item => item.strike !== null && item[plotField] !== null)
                .map(item => item[plotField]),
            mode: 'lines',
            name: 'Puts',
            line: { color: 'red' },
            hoverinfo: 'x+y+name'
        };
        
        console.log(`Call trace points: ${callTrace.x.length}, Put trace points: ${putTrace.x.length}`);
        
        // Check if we have enough data points to plot
        if (callTrace.x.length < 2 && putTrace.x.length < 2) {
            console.warn(`Not enough data points for ${currentDate} to create a meaningful plot`);
            return;
        }
        
        // Create vertical line for current price
        const yValues = [...callTrace.y.filter(y => y !== null && !isNaN(y)), 
                         ...putTrace.y.filter(y => y !== null && !isNaN(y))];
        
        // Handle case where we might not have enough data yet
        const maxY = yValues.length > 0 
            ? Math.max(...yValues) * 1.1 
            : 100; // Default if no valid data yet
        
        const priceLine = {
            x: [state.currentPrice, state.currentPrice],
            y: [0, maxY],
            mode: 'lines+text',
            name: `Strike: --`,
            text: [`Spot: $${state.currentPrice.toFixed(2)}`, ''],
            textposition: 'top',
            textfont: {
                color: 'black',
                size: 12
            },
            line: {
                color: 'green',
                width: 2,
                dash: 'dash'
            },
            hoverinfo: 'none'
        };
        
        // Create data array for plot
        const data = [callTrace, putTrace, priceLine];
        
        // Create layout
        const layout = {
            title: {
                text: `${state.symbol} Options - ${selectedPlotType} (${dte} DTE)`,
                font: {
                    size: 18
                }
            },
            xaxis: {
                title: 'Strike Price',
                tickprefix: '$'
            },
            yaxis: {
                title: selectedPlotType,
                tickprefix: PRICE_FIELDS.includes(selectedPlotType) ? '$' : ''
            },
            hovermode: 'closest',
            showlegend: true,
            legend: {
                x: 0,
                y: 1
            },
            margin: {
                l: 50,
                r: 50,
                t: 50,
                b: 50
            },
            plot_bgcolor: '#f8f9fa',
            paper_bgcolor: '#f8f9fa'
        };
        
        console.log("Creating or updating plot");
        
        // Create or update plot
        if (!state.plot) {
            console.log("Creating new plot");
            try {
                // Force a layout calculation before plotting
                const plotDiv = elements.plotContainer;
                console.log(`Plot container dimensions before plot: ${plotDiv.offsetWidth}x${plotDiv.offsetHeight}`);
                
                // Create the plot
                Plotly.newPlot('options-plot', data, layout, {responsive: true})
                    .then(() => {
                        console.log("Plot created successfully");
                        state.plot = document.getElementById('options-plot');
                        
                        // Add event listener for hover using the correct Plotly syntax
                        state.plot.on('plotly_hover', function(data) {
                            if (data.points && data.points.length > 0) {
                                const strike = data.points[0].x;
                                console.log(`Hover detected at strike: ${strike}`);
                                if (strike !== state.hoveredStrike) {
                                    state.hoveredStrike = strike;
                                    updateHoverLine(strike);
                                }
                            }
                        });
                    })
                    .catch(err => {
                        console.error("Error creating plot:", err);
                    });
            } catch (err) {
                console.error("Exception during plot creation:", err);
            }
        } else {
            console.log("Updating existing plot");
            try {
                Plotly.react('options-plot', data, layout)
                    .catch(err => {
                        console.error("Error updating plot:", err);
                    });
            } catch (err) {
                console.error("Exception during plot update:", err);
            }
        }
        
        // Add loading annotation for partial data
        if (state.isPolling) {
            const loadingAnnotation = {
                xref: 'paper',
                yref: 'paper',
                x: 0.5,
                y: 0.95,
                text: `Loading data: ${state.lastProcessedDates}/${state.totalDates} dates`,
                showarrow: false,
                font: {
                    family: 'Arial',
                    size: 14,
                    color: 'rgba(255, 0, 0, 0.7)'
                }
            };
            
            try {
                Plotly.relayout('options-plot', {
                    annotations: [loadingAnnotation]
                }).catch(err => {
                    console.error("Error adding loading annotation:", err);
                });
            } catch (err) {
                console.error("Exception during annotation update:", err);
            }
        } else {
            // Remove loading annotation if we're done loading
            try {
                Plotly.relayout('options-plot', {
                    annotations: []
                }).catch(err => {
                    console.error("Error removing loading annotation:", err);
                });
            } catch (err) {
                console.error("Exception during annotation removal:", err);
            }
        }
        
    } catch (error) {
        console.error('Error updating plot:', error);
    }
}

// Helper function to find the value at a specific strike
function findValueAtStrike(data, strike, field) {
    // Filter out null and NaN values first
    const validData = data.filter(item => 
        item.strike !== null && 
        item[field] !== null && 
        !isNaN(item[field]) && 
        item.strike !== undefined && 
        item[field] !== undefined
    );
    
    if (validData.length === 0) {
        return null;
    }
    
    // Find the exact match first
    const exactMatch = validData.find(item => item.strike === strike);
    if (exactMatch) {
        return exactMatch[field];
    }
    
    // Sort the data by strike price for proper interpolation
    validData.sort((a, b) => a.strike - b.strike);
    
    // Find the closest strikes (one below and one above)
    let lowerIndex = -1;
    for (let i = 0; i < validData.length; i++) {
        if (validData[i].strike <= strike) {
            lowerIndex = i;
        } else {
            break;
        }
    }
    
    // If we're at the edges of our data, return the closest point
    if (lowerIndex === -1) {
        return validData[0][field]; // Below the lowest strike
    }
    if (lowerIndex === validData.length - 1) {
        return validData[lowerIndex][field]; // Above the highest strike
    }
    
    // We have points on both sides, interpolate
    const lowerStrike = validData[lowerIndex].strike;
    const upperStrike = validData[lowerIndex + 1].strike;
    const lowerValue = validData[lowerIndex][field];
    const upperValue = validData[lowerIndex + 1][field];
    
    // Linear interpolation formula: y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)
    const ratio = (strike - lowerStrike) / (upperStrike - lowerStrike);
    const interpolatedValue = lowerValue + ratio * (upperValue - lowerValue);
    
    return interpolatedValue;
}

// Show or hide loading indicator
function showLoading(show) {
    if (elements.loadingIndicator) {
        elements.loadingIndicator.style.display = show ? 'block' : 'none';
        
        // Add progress information to loading indicator if available
        if (show && state.totalDates > 0) {
            const progress = Math.round((state.lastProcessedDates / state.totalDates) * 100);
            elements.loadingIndicator.innerHTML = `Loading... ${progress}% complete`;
        } else {
            elements.loadingIndicator.innerHTML = 'Loading...';
        }
    }
}

// Show error message
function showError(message) {
    if (elements.errorMessage) {
        elements.errorMessage.textContent = message;
        elements.errorMessage.style.display = 'block';
    }
}

// Hide error message
function hideError() {
    if (elements.errorMessage) {
        elements.errorMessage.style.display = 'none';
    }
}

// Update hover line and information
function updateHoverLine(strike) {
    console.log(`Updating hover line for strike: ${strike}`);
    if (!state.plot) {
        console.error("Cannot update hover line: Plot not initialized");
        return;
    }
    
    try {
        // Get the plot data from the DOM element
        const plotDiv = document.getElementById('options-plot');
        if (!plotDiv || !plotDiv.data) {
            console.error("Cannot update hover line: Plot data not available");
            return;
        }
        
        const plotData = plotDiv.data;
        const selectedPlotType = Array.from(elements.plotOptions).find(option => option.checked).value;
        const plotField = FIELD_MAPPING[selectedPlotType];
        
        // Get current date
        const currentDate = state.expiryDates[state.currentExpiryIndex];
        
        // Filter data for current expiry date
        const filteredData = state.optionsData.filter(item => item.expiration === currentDate);
        
        // Separate calls and puts
        const calls = filteredData.filter(item => item.option_type === 'call');
        const puts = filteredData.filter(item => item.option_type === 'put');
        
        // Find the call and put values at this strike
        const callData = calls.find(item => Math.abs(item.strike - strike) < 0.01);
        const putData = puts.find(item => Math.abs(item.strike - strike) < 0.01);
        
        // Update trace names with values
        if (callData && callData[plotField] !== null && !isNaN(callData[plotField])) {
            const formattedValue = PRICE_FIELDS.includes(selectedPlotType) ? 
                `$${callData[plotField].toFixed(2)}` : 
                Number.isInteger(callData[plotField]) ? callData[plotField].toString() : callData[plotField].toFixed(2);
            plotData[0].name = `Calls: ${formattedValue}`;
        } else {
            plotData[0].name = 'Calls: N/A';
        }
        
        if (putData && putData[plotField] !== null && !isNaN(putData[plotField])) {
            const formattedValue = PRICE_FIELDS.includes(selectedPlotType) ? 
                `$${putData[plotField].toFixed(2)}` : 
                Number.isInteger(putData[plotField]) ? putData[plotField].toString() : putData[plotField].toFixed(2);
            plotData[1].name = `Puts: ${formattedValue}`;
        } else {
            plotData[1].name = 'Puts: N/A';
        }
        
        // Update strike line
        plotData[2].name = `Strike: $${strike.toFixed(2)}`;
        plotData[2].x = [strike, strike];
        
        Plotly.redraw('options-plot')
            .catch(err => {
                console.error("Error redrawing plot:", err);
            });
    } catch (error) {
        console.error('Error updating hover line:', error);
    }
}

// Initialize the app when the DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM content loaded, initializing app");
    init();
    
    // Add window resize handler to make plot responsive
    window.addEventListener('resize', function() {
        if (state.optionsData && state.optionsData.length > 0 && state.plot) {
            try {
                Plotly.relayout('options-plot', {
                    autosize: true
                }).catch(err => {
                    console.error("Error resizing plot:", err);
                });
            } catch (err) {
                console.error("Exception during plot resize:", err);
            }
        }
    });
}); 
```

### options_visualizer_web/templates/index.html
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Options Visualizer</title>
    <!-- Plotly.js for interactive charts -->
    <script src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/static/css/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Options Visualizer</h1>
        </header>
        
        <div class="controls-section">
            <div class="search-section">
                <div class="ticker-input">
                    <label for="ticker">Ticker:</label>
                    <input type="text" id="ticker" placeholder="Enter stock symbol (e.g., SPY)">
                    <button id="search-btn">Search</button>
                </div>
                <div class="status">
                    <span id="status-label">Not updated yet</span>
                </div>
            </div>
            
            <div class="navigation-section">
                <button id="prev-btn" disabled>◀</button>
                <span id="expiry-label">No data</span>
                <button id="next-btn" disabled>▶</button>
            </div>
            
            <div class="plot-options">
                <fieldset>
                    <legend>Plot Type</legend>
                    <label><input type="radio" name="plot-type" value="Spot" checked> Spot</label>
                    <label><input type="radio" name="plot-type" value="Bid"> Bid</label>
                    <label><input type="radio" name="plot-type" value="Ask"> Ask</label>
                    <label><input type="radio" name="plot-type" value="Volume"> Volume</label>
                    <label><input type="radio" name="plot-type" value="Intrinsic Value"> Intrinsic Value</label>
                    <label><input type="radio" name="plot-type" value="Extrinsic Value"> Extrinsic Value</label>
                </fieldset>
            </div>
        </div>
        
        <div id="loading-indicator" style="display: none;">
            <div class="spinner"></div>
            <p>Loading data...</p>
        </div>
        
        <div id="plot-container">
            <div id="options-plot" style="width:100%; height:400px;"></div>
        </div>
        
        <div id="error-message" style="display: none;"></div>
    </div>
    
    <!-- Custom JavaScript -->
    <script src="/static/js/main.js"></script>
</body>
</html> 
```

### options_visualizer_backend/README.md
```
# Options Visualizer Backend

A Flask-based backend server for the Options Visualizer application. This server provides a stable, always-running service that fetches, caches, and serves options data from Yahoo Finance.

## Features

- Fetches options data from Yahoo Finance using the `yfinance` library
- Maintains a local cache of options data to reduce API calls
- Automatically refreshes cached data every 10 minutes
- Provides RESTful API endpoints for the frontend to consume
- Logs all server activities for monitoring and debugging

## Directory Structure

```
options_visualizer_backend/
├── app.py                  # Main Flask application
├── cache/                  # Directory for storing cached data files
│   └── [ticker].pkl        # Cached options data files (e.g., AAPL.pkl)
├── data/
│   └── tickers.csv         # CSV file with ticker symbols and timestamps
├── requirements.txt        # List of Python dependencies
└── logs/                   # Directory for log files
    └── server.log          # Server activity log
```

## Setup

1. Install dependencies:
   ```
   pip install -r requirements.txt
   ```

2. Ensure the CSV file is properly set up:
   - The file should be located at `data/tickers.csv`
   - It should have columns `ticker` and `timestamp`
   - Example content:
     ```
     ticker,timestamp
     AAPL,2023-03-01 12:00:00
     MSFT,2023-03-01 12:00:00
     TSLA,2023-03-01 12:00:00
     ```

## Running the Server

### Development Mode

```
python app.py
```

This will start the server on `http://0.0.0.0:5001`.

### Production Mode

For production, use Gunicorn:

```
gunicorn -w 4 -b 0.0.0.0:5001 app:app
```

- `-w 4`: 4 worker processes for concurrent requests
- `-b 0.0.0.0:5001`: Bind to all interfaces on port 5001

## API Endpoints

### Get Options Data

```
GET /api/options/<ticker>
```

Returns options data for the specified ticker symbol.

Example response:
```json
{
  "options": {
    "2023-03-17": {
      "calls": [...],
      "puts": [...]
    },
    "2023-03-24": {
      "calls": [...],
      "puts": [...]
    }
  },
  "price": 150.25,
  "ticker": "AAPL"
}
```

### Get Available Tickers

```
GET /api/tickers
```

Returns a list of all ticker symbols available in the system.

Example response:
```json
["AAPL", "MSFT", "TSLA", "AMZN", "GOOGL"]
```

### Health Check

```
GET /health
```

Returns the health status of the server.

Example response:
```json
{
  "status": "healthy"
}
```

## Maintenance

- **Logs**: Check `logs/server.log` for server activity and errors
- **Cache**: The cache is automatically updated every 10 minutes
- **Adding Tickers**: Add new tickers to `data/tickers.csv` with a timestamp 
```

### options_visualizer_backend/add_ticker.py
```
#!/usr/bin/env python3
import os
import sys
import pandas as pd
from datetime import datetime

def add_ticker(ticker):
    """Add a new ticker to the CSV file"""
    ticker = ticker.upper()
    csv_path = os.path.join('data', 'tickers.csv')
    
    # Create the data directory if it doesn't exist
    os.makedirs('data', exist_ok=True)
    
    # Check if the CSV file exists
    if os.path.exists(csv_path):
        # Read the existing CSV file
        df = pd.read_csv(csv_path)
        
        # Check if the ticker already exists
        if ticker in df['ticker'].values:
            print(f"Ticker {ticker} already exists in the CSV file.")
            return
        
        # Add the new ticker
        new_row = pd.DataFrame({'ticker': [ticker], 'timestamp': [datetime.now().isoformat()]})
        df = pd.concat([df, new_row], ignore_index=True)
    else:
        # Create a new CSV file
        df = pd.DataFrame({'ticker': [ticker], 'timestamp': [datetime.now().isoformat()]})
    
    # Save the CSV file
    df.to_csv(csv_path, index=False)
    print(f"Added ticker {ticker} to the CSV file.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python add_ticker.py <ticker>")
        sys.exit(1)
    
    ticker = sys.argv[1]
    add_ticker(ticker) 
```

### options_visualizer_backend/app.py
```
#!/usr/bin/env python3
import os
import time
import pickle
import logging
from datetime import datetime
from flask import Flask, jsonify, request, Response
import pandas as pd
import yfinance as yf
from apscheduler.schedulers.background import BackgroundScheduler
from flask_cors import CORS

# Setup logging
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    filename='logs/server.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Configuration
CACHE_DIR = 'cache'
DATA_DIR = 'data'
CSV_PATH = os.path.join(DATA_DIR, 'tickers.csv')
CACHE_DURATION = 10 * 60  # 10 minutes in seconds

# Ensure directories exist
os.makedirs(CACHE_DIR, exist_ok=True)
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs('logs', exist_ok=True)

# In-memory cache (dictionary: ticker -> (data, timestamp))
cache = {}

# Load ticker list from CSV
def load_tickers():
    try:
        df = pd.read_csv(CSV_PATH)
        return df.set_index('ticker')['timestamp'].to_dict()
    except FileNotFoundError:
        logger.error(f"CSV file not found at {CSV_PATH}")
        return {}

# Save ticker list to CSV
def save_tickers(tickers):
    df = pd.DataFrame(list(tickers.items()), columns=['ticker', 'timestamp'])
    df.to_csv(CSV_PATH, index=False)
    logger.info("Updated tickers.csv")

# Fetch options data from yfinance
def fetch_options_data(ticker):
    try:
        stock = yf.Ticker(ticker)
        options_dates = stock.options
        if not options_dates:
            logger.warning(f"No options data for {ticker}")
            return None
        
        options_data = {}
        try:
            current_price = stock.info.get('regularMarketPrice')
            if current_price is None:
                current_price = stock.history(period="1d")['Close'].iloc[-1]
        except Exception as e:
            logger.error(f"Error getting current price for {ticker}: {str(e)}")
            try:
                current_price = stock.history(period="1d")['Close'].iloc[-1]
            except Exception as e2:
                logger.error(f"Fallback price fetch failed for {ticker}: {str(e2)}")
                current_price = None
        
        for date in options_dates:
            try:
                opt = stock.option_chain(date)
                options_data[date] = {
                    'calls': opt.calls.to_dict('records'),
                    'puts': opt.puts.to_dict('records')
                }
            except Exception as e:
                logger.error(f"Error fetching options for {ticker} date {date}: {str(e)}")
                continue
                
        logger.info(f"Fetched options data for {ticker}")
        return {'options': options_data, 'price': current_price, 'ticker': ticker}
    except Exception as e:
        logger.error(f"Error fetching data for {ticker}: {str(e)}")
        return None

# Load cache from disk
def load_cache(ticker):
    cache_file = os.path.join(CACHE_DIR, f"{ticker}.pkl")
    if os.path.exists(cache_file):
        try:
            with open(cache_file, 'rb') as f:
                return pickle.load(f)
        except Exception as e:
            logger.error(f"Error loading cache for {ticker}: {str(e)}")
            return None
    return None

# Save to cache (disk and memory)
def save_cache(ticker, data):
    try:
        cache_file = os.path.join(CACHE_DIR, f"{ticker}.pkl")
        with open(cache_file, 'wb') as f:
            pickle.dump((data, time.time()), f)
        cache[ticker] = (data, time.time())
        logger.info(f"Cached data for {ticker}")
    except Exception as e:
        logger.error(f"Error saving cache for {ticker}: {str(e)}")

# Get options data (from cache or fetch)
def get_options_data(ticker):
    # Check in-memory cache
    if ticker in cache:
        data, timestamp = cache[ticker]
        if time.time() - timestamp < CACHE_DURATION:
            logger.info(f"Serving {ticker} from in-memory cache")
            return data
    
    # Check disk cache
    cached = load_cache(ticker)
    if cached:
        data, timestamp = cached
        if time.time() - timestamp < CACHE_DURATION:
            cache[ticker] = (data, timestamp)
            logger.info(f"Serving {ticker} from disk cache")
            return data
    
    # Fetch fresh data if cache is old or missing
    data = fetch_options_data(ticker)
    if data:
        save_cache(ticker, data)
        # Update ticker timestamp in CSV
        tickers = load_tickers()
        tickers[ticker] = datetime.now().isoformat()
        save_tickers(tickers)
    return data

# Background task to update cache
def update_cache():
    logger.info("Starting scheduled cache update")
    tickers = load_tickers()
    for ticker in tickers.keys():
        try:
            data = fetch_options_data(ticker)
            if data:
                save_cache(ticker, data)
                tickers[ticker] = datetime.now().isoformat()
        except Exception as e:
            logger.error(f"Error updating cache for {ticker}: {str(e)}")
    save_tickers(tickers)
    logger.info("Completed scheduled cache update")

# API endpoint to get options data
@app.route('/api/options/<ticker>', methods=['GET'])
def get_ticker_options(ticker):
    ticker = ticker.upper()
    data = get_options_data(ticker)
    if data:
        return jsonify(data)
    return jsonify({'error': f"Could not fetch data for {ticker}"}), 500

# API endpoint to get available tickers
@app.route('/api/tickers', methods=['GET'])
def get_tickers():
    tickers = load_tickers()
    return jsonify(list(tickers.keys()))

# Health check endpoint
@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'healthy'})

# Initialize scheduler
scheduler = BackgroundScheduler()
scheduler.add_job(update_cache, 'interval', minutes=10)
scheduler.start()

# Load initial cache
def initialize_cache():
    logger.info("Initializing cache...")
    tickers = load_tickers()
    for ticker in tickers.keys():
        try:
            data = get_options_data(ticker)
            if data:
                logger.info(f"Initialized cache for {ticker}")
        except Exception as e:
            logger.error(f"Error initializing cache for {ticker}: {str(e)}")
    logger.info("Cache initialization complete")

if __name__ == '__main__':
    logger.info("Starting Flask server...")
    initialize_cache()
    # Run with Gunicorn in production: gunicorn -w 4 -b 0.0.0.0:5001 app:app
    app.run(host='0.0.0.0', port=5001, debug=False) 
```

### options_visualizer_backend/clean_cache.py
```
#!/usr/bin/env python3
import os
import shutil
import sys

def clean_cache():
    """Clean the cache directory"""
    cache_dir = 'cache'
    
    # Check if the cache directory exists
    if os.path.exists(cache_dir):
        # Remove all files in the cache directory
        for file in os.listdir(cache_dir):
            file_path = os.path.join(cache_dir, file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
                    print(f"Removed {file_path}")
            except Exception as e:
                print(f"Error removing {file_path}: {e}")
        
        print("Cache cleaned successfully.")
    else:
        print(f"Cache directory {cache_dir} does not exist.")

if __name__ == "__main__":
    clean_cache() 
```

### options_visualizer_backend/requirements.txt
```
flask>=2.3.3
yfinance>=0.2.36
pandas>=2.1.1
numpy>=1.26.0
apscheduler>=3.10.4
gunicorn>=22.0.0
flask-cors>=4.0.0 
```

### options_visualizer_backend/run.sh
```
#!/bin/bash

# Run in development mode
python app.py

# Uncomment the following line to run in production mode with Gunicorn
# gunicorn -w 4 -b 0.0.0.0:5001 app:app 
```

### options_visualizer_backend/test_api.py
```
#!/usr/bin/env python3
import requests
import json
import time

BASE_URL = "http://localhost:5001"

def test_health():
    """Test the health check endpoint"""
    response = requests.get(f"{BASE_URL}/health")
    print(f"Health check: {response.status_code}")
    print(response.json())
    print()

def test_tickers():
    """Test the tickers endpoint"""
    response = requests.get(f"{BASE_URL}/api/tickers")
    print(f"Tickers: {response.status_code}")
    print(response.json())
    print()

def test_options(ticker="AAPL"):
    """Test the options endpoint for a specific ticker"""
    print(f"Fetching options data for {ticker}...")
    start_time = time.time()
    response = requests.get(f"{BASE_URL}/api/options/{ticker}")
    elapsed = time.time() - start_time
    print(f"Options for {ticker}: {response.status_code} (took {elapsed:.2f} seconds)")
    if response.status_code == 200:
        data = response.json()
        print(f"Current price: {data.get('price')}")
        print(f"Available expiration dates: {list(data.get('options', {}).keys())}")
    else:
        print(response.json())
    print()

if __name__ == "__main__":
    print("Testing API endpoints...")
    test_health()
    test_tickers()
    
    # Test a few tickers
    test_options("AAPL")
    test_options("MSFT")
    
    # Test the cache by fetching the same ticker again (should be faster)
    print("Testing cache by fetching AAPL again...")
    test_options("AAPL") 
```

### options_visualizer_backend/data/tickers.csv
```
ticker,timestamp
AAPL,2023-03-01 12:00:00
MSFT,2023-03-01 12:00:00
TSLA,2023-03-01 12:00:00
AMZN,2023-03-01 12:00:00
GOOGL,2023-03-01 12:00:00
SPY,2023-03-01 12:00:00 
```

### debug/error_log.txt
```
=== New session started at 2025-02-26 09:03:06 ===
2025-02-26 09:03:06,753 - __main__ - INFO - Starting new session of Options Visualizer
2025-02-26 09:03:06,863 - __main__ - INFO - Initializing Options Visualizer App
2025-02-26 09:03:06,867 - __main__ - INFO - Loading default ticker: SPY
2025-02-26 09:03:06,867 - __main__ - INFO - Fetching options data for SPY
2025-02-26 09:03:06,867 - yahoo_finance - INFO - Fetching fresh data for ticker: SPY
2025-02-26 09:03:07,426 - yahoo_finance - INFO - Got current price for SPY: 597.6579
2025-02-26 09:03:07,550 - yahoo_finance - INFO - Found 32 expiration dates for SPY
2025-02-26 09:03:07,661 - yahoo_finance - INFO - Fetched 1/32 expiration dates for SPY
2025-02-26 09:03:07,661 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:07,661 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:07,661 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:07,662 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:07,663 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:07,663 - options_data - INFO - Combined data shape: (139, 17)
2025-02-26 09:03:07,663 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:07,666 - options_data - INFO - Price range: 0.00 to 34.03
2025-02-26 09:03:07,666 - options_data - INFO - Strike range: 515.00 to 690.00
2025-02-26 09:03:07,666 - options_data - INFO - DTE range: 0 to 0
2025-02-26 09:03:07,666 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:07,666 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:07,666 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                       int64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:07,666 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:07,666 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:07,666 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:07,666 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:07,666 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:07,667 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:07,667 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:07,667 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:07,667 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:07,667 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:07,826 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:07,826 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:07,826 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:07,827 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942577475  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:07,827 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942577475  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:07,827 - options_data - INFO - Found 1 expiration dates
2025-02-26 09:03:07,827 - __main__ - INFO - Applying interpolation to temporary data
2025-02-26 09:03:07,827 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:07,827 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:07,828 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942577475  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:07,828 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942577475  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:07,828 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/1)
2025-02-26 09:03:08,011 - __main__ - INFO - Plot updated successfully for Spot
2025-02-26 09:03:08,158 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:08,158 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:08,158 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:08,158 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:08,159 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:08,159 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:08,159 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:08,160 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:08,160 - options_data - INFO - Combined data shape: (283, 17)
2025-02-26 09:03:08,160 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:08,161 - options_data - INFO - Price range: 0.00 to 55.49
2025-02-26 09:03:08,161 - options_data - INFO - Strike range: 515.00 to 690.00
2025-02-26 09:03:08,162 - options_data - INFO - DTE range: 0 to 1
2025-02-26 09:03:08,162 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:08,162 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:08,162 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                       int64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:08,162 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:08,162 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:08,162 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:08,162 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:08,162 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:08,162 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:08,162 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:08,455 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:08,455 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:08,455 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:08,456 - options_data - INFO - Interpolated lastPrice for call
2025-02-26 09:03:08,456 - options_data - INFO - Interpolated bid for call
2025-02-26 09:03:08,457 - options_data - INFO - Interpolated ask for call
2025-02-26 09:03:08,457 - options_data - INFO - Interpolated change for call
2025-02-26 09:03:08,458 - options_data - INFO - Interpolated percentChange for call
2025-02-26 09:03:08,458 - options_data - INFO - Interpolated volume for call
2025-02-26 09:03:08,459 - options_data - INFO - Interpolated openInterest for call
2025-02-26 09:03:08,459 - options_data - INFO - Interpolated impliedVolatility for call
2025-02-26 09:03:08,460 - options_data - INFO - Interpolated inTheMoney for call
2025-02-26 09:03:08,460 - options_data - INFO - Interpolated spot for call
2025-02-26 09:03:08,461 - options_data - INFO - Interpolated price for call
2025-02-26 09:03:08,461 - options_data - INFO - Interpolated intrinsic_value for call
2025-02-26 09:03:08,461 - options_data - INFO - Interpolated extrinsic_value for call
2025-02-26 09:03:08,462 - options_data - INFO - Interpolated lastPrice for put
2025-02-26 09:03:08,463 - options_data - INFO - Interpolated bid for put
2025-02-26 09:03:08,463 - options_data - INFO - Interpolated ask for put
2025-02-26 09:03:08,464 - options_data - INFO - Interpolated change for put
2025-02-26 09:03:08,465 - options_data - INFO - Interpolated percentChange for put
2025-02-26 09:03:08,465 - options_data - INFO - Interpolated volume for put
2025-02-26 09:03:08,466 - options_data - INFO - Interpolated openInterest for put
2025-02-26 09:03:08,466 - options_data - INFO - Interpolated impliedVolatility for put
2025-02-26 09:03:08,467 - options_data - INFO - Interpolated inTheMoney for put
2025-02-26 09:03:08,468 - options_data - INFO - Interpolated spot for put
2025-02-26 09:03:08,468 - options_data - INFO - Interpolated price for put
2025-02-26 09:03:08,469 - options_data - INFO - Interpolated intrinsic_value for put
2025-02-26 09:03:08,469 - options_data - INFO - Interpolated extrinsic_value for put
2025-02-26 09:03:08,469 - options_data - INFO - Completed 2D interpolation
2025-02-26 09:03:08,469 - options_data - INFO - Found 2 expiration dates
2025-02-26 09:03:08,470 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/2)
2025-02-26 09:03:08,470 - __main__ - INFO - Re-applying interpolation with updated data
2025-02-26 09:03:08,470 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:08,470 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:08,471 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942594282  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:08,471 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942594282  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:08,627 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:08,627 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:08,627 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:08,628 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:08,628 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:08,628 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:08,628 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:08,629 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:08,629 - options_data - INFO - Processing data for expiration date: 2025-02-28
2025-02-26 09:03:08,629 - options_data - INFO - Processing 186 call options for 2025-02-28
2025-02-26 09:03:08,629 - options_data - INFO - Processing 176 put options for 2025-02-28
2025-02-26 09:03:08,630 - options_data - INFO - Combined data shape: (645, 17)
2025-02-26 09:03:08,630 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:08,632 - options_data - INFO - Price range: 0.00 to 235.44
2025-02-26 09:03:08,632 - options_data - INFO - Strike range: 360.00 to 700.00
2025-02-26 09:03:08,632 - options_data - INFO - DTE range: 0 to 2
2025-02-26 09:03:08,632 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:08,632 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:08,632 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                       int64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:08,632 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:08,632 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:08,632 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:08,632 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:08,632 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:08,632 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:08,632 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:08,632 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:08,632 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:08,632 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:08,633 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:08,633 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:08,633 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:08,633 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:08,633 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:08,633 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:08,633 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:08,633 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:08,633 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:09,283 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:09,284 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:09,284 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:09,286 - options_data - INFO - Interpolated lastPrice for call
2025-02-26 09:03:09,287 - options_data - INFO - Interpolated bid for call
2025-02-26 09:03:09,289 - options_data - INFO - Interpolated ask for call
2025-02-26 09:03:09,290 - options_data - INFO - Interpolated change for call
2025-02-26 09:03:09,291 - options_data - INFO - Interpolated percentChange for call
2025-02-26 09:03:09,293 - options_data - INFO - Interpolated volume for call
2025-02-26 09:03:09,294 - options_data - INFO - Interpolated openInterest for call
2025-02-26 09:03:09,295 - options_data - INFO - Interpolated impliedVolatility for call
2025-02-26 09:03:09,296 - options_data - INFO - Interpolated inTheMoney for call
2025-02-26 09:03:09,298 - options_data - INFO - Interpolated spot for call
2025-02-26 09:03:09,299 - options_data - INFO - Interpolated price for call
2025-02-26 09:03:09,300 - options_data - INFO - Interpolated intrinsic_value for call
2025-02-26 09:03:09,302 - options_data - INFO - Interpolated extrinsic_value for call
2025-02-26 09:03:09,304 - options_data - INFO - Interpolated lastPrice for put
2025-02-26 09:03:09,305 - options_data - INFO - Interpolated bid for put
2025-02-26 09:03:09,306 - options_data - INFO - Interpolated ask for put
2025-02-26 09:03:09,308 - options_data - INFO - Interpolated change for put
2025-02-26 09:03:09,309 - options_data - INFO - Interpolated percentChange for put
2025-02-26 09:03:09,311 - options_data - INFO - Interpolated volume for put
2025-02-26 09:03:09,312 - options_data - INFO - Interpolated openInterest for put
2025-02-26 09:03:09,313 - options_data - INFO - Interpolated impliedVolatility for put
2025-02-26 09:03:09,314 - options_data - INFO - Interpolated inTheMoney for put
2025-02-26 09:03:09,316 - options_data - INFO - Interpolated spot for put
2025-02-26 09:03:09,317 - options_data - INFO - Interpolated price for put
2025-02-26 09:03:09,318 - options_data - INFO - Interpolated intrinsic_value for put
2025-02-26 09:03:09,320 - options_data - INFO - Interpolated extrinsic_value for put
2025-02-26 09:03:09,320 - options_data - INFO - Completed 2D interpolation
2025-02-26 09:03:09,320 - options_data - INFO - Found 3 expiration dates
2025-02-26 09:03:09,323 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/3)
2025-02-26 09:03:09,338 - __main__ - INFO - Re-applying interpolation with updated data
2025-02-26 09:03:09,338 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:09,338 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:09,338 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942611089  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:09,339 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942611089  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:09,456 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:09,457 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:09,457 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:09,457 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:09,457 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:09,457 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:09,457 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:09,458 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:09,458 - options_data - INFO - Processing data for expiration date: 2025-02-28
2025-02-26 09:03:09,458 - options_data - INFO - Processing 186 call options for 2025-02-28
2025-02-26 09:03:09,458 - options_data - INFO - Processing 176 put options for 2025-02-28
2025-02-26 09:03:09,458 - options_data - INFO - Processing data for expiration date: 2025-03-03
2025-02-26 09:03:09,458 - options_data - INFO - Processing 67 call options for 2025-03-03
2025-02-26 09:03:09,458 - options_data - INFO - Processing 73 put options for 2025-03-03
2025-02-26 09:03:09,459 - options_data - INFO - Combined data shape: (785, 17)
2025-02-26 09:03:09,459 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:09,460 - options_data - INFO - Price range: 0.00 to 235.44
2025-02-26 09:03:09,460 - options_data - INFO - Strike range: 360.00 to 700.00
2025-02-26 09:03:09,460 - options_data - INFO - DTE range: 0 to 5
2025-02-26 09:03:09,460 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:09,460 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:09,460 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                       int64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:09,460 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:09,460 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:09,460 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:09,460 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:09,461 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:09,461 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:09,461 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:09,461 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:09,461 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:10,248 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:10,248 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:10,248 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:10,250 - options_data - INFO - Interpolated lastPrice for call
2025-02-26 09:03:10,251 - options_data - INFO - Interpolated bid for call
2025-02-26 09:03:10,252 - options_data - INFO - Interpolated ask for call
2025-02-26 09:03:10,253 - options_data - INFO - Interpolated change for call
2025-02-26 09:03:10,255 - options_data - INFO - Interpolated percentChange for call
2025-02-26 09:03:10,256 - options_data - INFO - Interpolated volume for call
2025-02-26 09:03:10,257 - options_data - INFO - Interpolated openInterest for call
2025-02-26 09:03:10,258 - options_data - INFO - Interpolated impliedVolatility for call
2025-02-26 09:03:10,259 - options_data - INFO - Interpolated inTheMoney for call
2025-02-26 09:03:10,261 - options_data - INFO - Interpolated spot for call
2025-02-26 09:03:10,262 - options_data - INFO - Interpolated price for call
2025-02-26 09:03:10,263 - options_data - INFO - Interpolated intrinsic_value for call
2025-02-26 09:03:10,264 - options_data - INFO - Interpolated extrinsic_value for call
2025-02-26 09:03:10,266 - options_data - INFO - Interpolated lastPrice for put
2025-02-26 09:03:10,268 - options_data - INFO - Interpolated bid for put
2025-02-26 09:03:10,269 - options_data - INFO - Interpolated ask for put
2025-02-26 09:03:10,271 - options_data - INFO - Interpolated change for put
2025-02-26 09:03:10,273 - options_data - INFO - Interpolated percentChange for put
2025-02-26 09:03:10,274 - options_data - INFO - Interpolated volume for put
2025-02-26 09:03:10,275 - options_data - INFO - Interpolated openInterest for put
2025-02-26 09:03:10,277 - options_data - INFO - Interpolated impliedVolatility for put
2025-02-26 09:03:10,278 - options_data - INFO - Interpolated inTheMoney for put
2025-02-26 09:03:10,280 - options_data - INFO - Interpolated spot for put
2025-02-26 09:03:10,281 - options_data - INFO - Interpolated price for put
2025-02-26 09:03:10,282 - options_data - INFO - Interpolated intrinsic_value for put
2025-02-26 09:03:10,284 - options_data - INFO - Interpolated extrinsic_value for put
2025-02-26 09:03:10,284 - options_data - INFO - Completed 2D interpolation
2025-02-26 09:03:10,284 - options_data - INFO - Found 4 expiration dates
2025-02-26 09:03:10,289 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/4)
2025-02-26 09:03:10,290 - __main__ - INFO - Re-applying interpolation with updated data
2025-02-26 09:03:10,290 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:10,290 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:10,290 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942627896  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:10,291 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942627896  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:10,403 - yahoo_finance - INFO - Fetched 5/32 expiration dates for SPY
2025-02-26 09:03:10,403 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:10,403 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:10,403 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:10,403 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:10,403 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:10,404 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:10,404 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:10,404 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:10,404 - options_data - INFO - Processing data for expiration date: 2025-02-28
2025-02-26 09:03:10,404 - options_data - INFO - Processing 186 call options for 2025-02-28
2025-02-26 09:03:10,405 - options_data - INFO - Processing 176 put options for 2025-02-28
2025-02-26 09:03:10,405 - options_data - INFO - Processing data for expiration date: 2025-03-03
2025-02-26 09:03:10,405 - options_data - INFO - Processing 67 call options for 2025-03-03
2025-02-26 09:03:10,405 - options_data - INFO - Processing 73 put options for 2025-03-03
2025-02-26 09:03:10,405 - options_data - INFO - Processing data for expiration date: 2025-03-04
2025-02-26 09:03:10,406 - options_data - INFO - Processing 59 call options for 2025-03-04
2025-02-26 09:03:10,406 - options_data - INFO - Processing 69 put options for 2025-03-04
2025-02-26 09:03:10,407 - options_data - INFO - Combined data shape: (913, 17)
2025-02-26 09:03:10,407 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:10,408 - options_data - INFO - Price range: 0.00 to 235.44
2025-02-26 09:03:10,408 - options_data - INFO - Strike range: 360.00 to 700.00
2025-02-26 09:03:10,408 - options_data - INFO - DTE range: 0 to 6
2025-02-26 09:03:10,408 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:10,408 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:10,408 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                       int64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:10,408 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:10,408 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:10,408 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:10,408 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:10,408 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:10,409 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:10,409 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:10,409 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:10,409 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:10,409 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:11,333 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:11,333 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:11,333 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:11,335 - options_data - INFO - Interpolated lastPrice for call
2025-02-26 09:03:11,337 - options_data - INFO - Interpolated bid for call
2025-02-26 09:03:11,339 - options_data - INFO - Interpolated ask for call
2025-02-26 09:03:11,340 - options_data - INFO - Interpolated change for call
2025-02-26 09:03:11,342 - options_data - INFO - Interpolated percentChange for call
2025-02-26 09:03:11,343 - options_data - INFO - Interpolated volume for call
2025-02-26 09:03:11,344 - options_data - INFO - Interpolated openInterest for call
2025-02-26 09:03:11,346 - options_data - INFO - Interpolated impliedVolatility for call
2025-02-26 09:03:11,347 - options_data - INFO - Interpolated inTheMoney for call
2025-02-26 09:03:11,348 - options_data - INFO - Interpolated spot for call
2025-02-26 09:03:11,350 - options_data - INFO - Interpolated price for call
2025-02-26 09:03:11,351 - options_data - INFO - Interpolated intrinsic_value for call
2025-02-26 09:03:11,352 - options_data - INFO - Interpolated extrinsic_value for call
2025-02-26 09:03:11,354 - options_data - INFO - Interpolated lastPrice for put
2025-02-26 09:03:11,356 - options_data - INFO - Interpolated bid for put
2025-02-26 09:03:11,358 - options_data - INFO - Interpolated ask for put
2025-02-26 09:03:11,360 - options_data - INFO - Interpolated change for put
2025-02-26 09:03:11,362 - options_data - INFO - Interpolated percentChange for put
2025-02-26 09:03:11,363 - options_data - INFO - Interpolated volume for put
2025-02-26 09:03:11,365 - options_data - INFO - Interpolated openInterest for put
2025-02-26 09:03:11,367 - options_data - INFO - Interpolated impliedVolatility for put
2025-02-26 09:03:11,368 - options_data - INFO - Interpolated inTheMoney for put
2025-02-26 09:03:11,370 - options_data - INFO - Interpolated spot for put
2025-02-26 09:03:11,372 - options_data - INFO - Interpolated price for put
2025-02-26 09:03:11,373 - options_data - INFO - Interpolated intrinsic_value for put
2025-02-26 09:03:11,375 - options_data - INFO - Interpolated extrinsic_value for put
2025-02-26 09:03:11,375 - options_data - INFO - Completed 2D interpolation
2025-02-26 09:03:11,375 - options_data - INFO - Found 5 expiration dates
2025-02-26 09:03:11,412 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/5)
2025-02-26 09:03:11,413 - __main__ - INFO - Re-applying interpolation with updated data
2025-02-26 09:03:11,413 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:11,413 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:11,413 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942644703  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:11,413 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942644703  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:11,586 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:11,586 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:11,586 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:11,586 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:11,587 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:11,587 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:11,588 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:11,588 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:11,588 - options_data - INFO - Processing data for expiration date: 2025-02-28
2025-02-26 09:03:11,588 - options_data - INFO - Processing 186 call options for 2025-02-28
2025-02-26 09:03:11,589 - options_data - INFO - Processing 176 put options for 2025-02-28
2025-02-26 09:03:11,589 - options_data - INFO - Processing data for expiration date: 2025-03-03
2025-02-26 09:03:11,589 - options_data - INFO - Processing 67 call options for 2025-03-03
2025-02-26 09:03:11,589 - options_data - INFO - Processing 73 put options for 2025-03-03
2025-02-26 09:03:11,590 - options_data - INFO - Processing data for expiration date: 2025-03-04
2025-02-26 09:03:11,590 - options_data - INFO - Processing 59 call options for 2025-03-04
2025-02-26 09:03:11,590 - options_data - INFO - Processing 69 put options for 2025-03-04
2025-02-26 09:03:11,591 - options_data - INFO - Processing data for expiration date: 2025-03-05
2025-02-26 09:03:11,591 - options_data - INFO - Processing 44 call options for 2025-03-05
2025-02-26 09:03:11,591 - options_data - INFO - Processing 63 put options for 2025-03-05
2025-02-26 09:03:11,592 - options_data - INFO - Combined data shape: (1020, 17)
2025-02-26 09:03:11,592 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:11,594 - options_data - INFO - Price range: 0.00 to 235.44
2025-02-26 09:03:11,594 - options_data - INFO - Strike range: 360.00 to 700.00
2025-02-26 09:03:11,594 - options_data - INFO - DTE range: 0 to 7
2025-02-26 09:03:11,594 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:11,594 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:11,594 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                     float64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:11,594 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:11,594 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:11,594 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:11,594 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:11,595 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:11,595 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:11,595 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:11,595 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:11,595 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:12,629 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:12,630 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:12,630 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:12,632 - options_data - INFO - Interpolated lastPrice for call
2025-02-26 09:03:12,634 - options_data - INFO - Interpolated bid for call
2025-02-26 09:03:12,635 - options_data - INFO - Interpolated ask for call
2025-02-26 09:03:12,637 - options_data - INFO - Interpolated change for call
2025-02-26 09:03:12,639 - options_data - INFO - Interpolated percentChange for call
2025-02-26 09:03:12,640 - options_data - INFO - Interpolated volume for call
2025-02-26 09:03:12,642 - options_data - INFO - Interpolated openInterest for call
2025-02-26 09:03:12,643 - options_data - INFO - Interpolated impliedVolatility for call
2025-02-26 09:03:12,645 - options_data - INFO - Interpolated inTheMoney for call
2025-02-26 09:03:12,647 - options_data - INFO - Interpolated spot for call
2025-02-26 09:03:12,648 - options_data - INFO - Interpolated price for call
2025-02-26 09:03:12,650 - options_data - INFO - Interpolated intrinsic_value for call
2025-02-26 09:03:12,651 - options_data - INFO - Interpolated extrinsic_value for call
2025-02-26 09:03:12,653 - options_data - INFO - Interpolated lastPrice for put
2025-02-26 09:03:12,655 - options_data - INFO - Interpolated bid for put
2025-02-26 09:03:12,657 - options_data - INFO - Interpolated ask for put
2025-02-26 09:03:12,659 - options_data - INFO - Interpolated change for put
2025-02-26 09:03:12,660 - options_data - INFO - Interpolated percentChange for put
2025-02-26 09:03:12,662 - options_data - INFO - Interpolated volume for put
2025-02-26 09:03:12,664 - options_data - INFO - Interpolated openInterest for put
2025-02-26 09:03:12,666 - options_data - INFO - Interpolated impliedVolatility for put
2025-02-26 09:03:12,668 - options_data - INFO - Interpolated inTheMoney for put
2025-02-26 09:03:12,669 - options_data - INFO - Interpolated spot for put
2025-02-26 09:03:12,671 - options_data - INFO - Interpolated price for put
2025-02-26 09:03:12,673 - options_data - INFO - Interpolated intrinsic_value for put
2025-02-26 09:03:12,674 - options_data - INFO - Interpolated extrinsic_value for put
2025-02-26 09:03:12,674 - options_data - INFO - Completed 2D interpolation
2025-02-26 09:03:12,675 - options_data - INFO - Found 6 expiration dates
2025-02-26 09:03:12,675 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/6)
2025-02-26 09:03:12,676 - __main__ - INFO - Re-applying interpolation with updated data
2025-02-26 09:03:12,676 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:12,676 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:12,676 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942661510  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:12,676 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942661510  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:12,792 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:12,792 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:12,792 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:12,792 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:12,792 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:12,792 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:12,793 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:12,793 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:12,793 - options_data - INFO - Processing data for expiration date: 2025-02-28
2025-02-26 09:03:12,793 - options_data - INFO - Processing 186 call options for 2025-02-28
2025-02-26 09:03:12,794 - options_data - INFO - Processing 176 put options for 2025-02-28
2025-02-26 09:03:12,794 - options_data - INFO - Processing data for expiration date: 2025-03-03
2025-02-26 09:03:12,794 - options_data - INFO - Processing 67 call options for 2025-03-03
2025-02-26 09:03:12,794 - options_data - INFO - Processing 73 put options for 2025-03-03
2025-02-26 09:03:12,794 - options_data - INFO - Processing data for expiration date: 2025-03-04
2025-02-26 09:03:12,795 - options_data - INFO - Processing 59 call options for 2025-03-04
2025-02-26 09:03:12,795 - options_data - INFO - Processing 69 put options for 2025-03-04
2025-02-26 09:03:12,795 - options_data - INFO - Processing data for expiration date: 2025-03-05
2025-02-26 09:03:12,795 - options_data - INFO - Processing 44 call options for 2025-03-05
2025-02-26 09:03:12,795 - options_data - INFO - Processing 63 put options for 2025-03-05
2025-02-26 09:03:12,796 - options_data - INFO - Processing data for expiration date: 2025-03-06
2025-02-26 09:03:12,796 - options_data - INFO - Processing 50 call options for 2025-03-06
2025-02-26 09:03:12,796 - options_data - INFO - Processing 59 put options for 2025-03-06
2025-02-26 09:03:12,797 - options_data - INFO - Combined data shape: (1129, 17)
2025-02-26 09:03:12,797 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:12,798 - options_data - INFO - Price range: 0.00 to 235.44
2025-02-26 09:03:12,798 - options_data - INFO - Strike range: 360.00 to 700.00
2025-02-26 09:03:12,798 - options_data - INFO - DTE range: 0 to 8
2025-02-26 09:03:12,798 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:12,798 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:12,799 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                     float64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:12,799 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:12,799 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:12,799 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:12,799 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:12,799 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:12,799 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:12,799 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:13,936 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:13,936 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:13,936 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:13,939 - options_data - INFO - Interpolated lastPrice for call
2025-02-26 09:03:13,941 - options_data - INFO - Interpolated bid for call
2025-02-26 09:03:13,942 - options_data - INFO - Interpolated ask for call
2025-02-26 09:03:13,944 - options_data - INFO - Interpolated change for call
2025-02-26 09:03:13,946 - options_data - INFO - Interpolated percentChange for call
2025-02-26 09:03:13,948 - options_data - INFO - Interpolated volume for call
2025-02-26 09:03:13,949 - options_data - INFO - Interpolated openInterest for call
2025-02-26 09:03:13,951 - options_data - INFO - Interpolated impliedVolatility for call
2025-02-26 09:03:13,953 - options_data - INFO - Interpolated inTheMoney for call
2025-02-26 09:03:13,954 - options_data - INFO - Interpolated spot for call
2025-02-26 09:03:13,956 - options_data - INFO - Interpolated price for call
2025-02-26 09:03:13,958 - options_data - INFO - Interpolated intrinsic_value for call
2025-02-26 09:03:13,959 - options_data - INFO - Interpolated extrinsic_value for call
2025-02-26 09:03:13,961 - options_data - INFO - Interpolated lastPrice for put
2025-02-26 09:03:13,963 - options_data - INFO - Interpolated bid for put
2025-02-26 09:03:13,965 - options_data - INFO - Interpolated ask for put
2025-02-26 09:03:13,967 - options_data - INFO - Interpolated change for put
2025-02-26 09:03:13,969 - options_data - INFO - Interpolated percentChange for put
2025-02-26 09:03:13,971 - options_data - INFO - Interpolated volume for put
2025-02-26 09:03:13,973 - options_data - INFO - Interpolated openInterest for put
2025-02-26 09:03:13,975 - options_data - INFO - Interpolated impliedVolatility for put
2025-02-26 09:03:13,977 - options_data - INFO - Interpolated inTheMoney for put
2025-02-26 09:03:13,979 - options_data - INFO - Interpolated spot for put
2025-02-26 09:03:13,981 - options_data - INFO - Interpolated price for put
2025-02-26 09:03:13,983 - options_data - INFO - Interpolated intrinsic_value for put
2025-02-26 09:03:13,985 - options_data - INFO - Interpolated extrinsic_value for put
2025-02-26 09:03:13,985 - options_data - INFO - Completed 2D interpolation
2025-02-26 09:03:13,985 - options_data - INFO - Found 7 expiration dates
2025-02-26 09:03:13,985 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/7)
2025-02-26 09:03:13,986 - __main__ - INFO - Re-applying interpolation with updated data
2025-02-26 09:03:13,986 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:13,986 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:13,986 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942678317  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:13,987 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942678317  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:14,117 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:14,117 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:14,117 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:14,118 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:14,118 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:14,118 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:14,119 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:14,119 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:14,119 - options_data - INFO - Processing data for expiration date: 2025-02-28
2025-02-26 09:03:14,119 - options_data - INFO - Processing 186 call options for 2025-02-28
2025-02-26 09:03:14,120 - options_data - INFO - Processing 176 put options for 2025-02-28
2025-02-26 09:03:14,120 - options_data - INFO - Processing data for expiration date: 2025-03-03
2025-02-26 09:03:14,120 - options_data - INFO - Processing 67 call options for 2025-03-03
2025-02-26 09:03:14,120 - options_data - INFO - Processing 73 put options for 2025-03-03
2025-02-26 09:03:14,120 - options_data - INFO - Processing data for expiration date: 2025-03-04
2025-02-26 09:03:14,121 - options_data - INFO - Processing 59 call options for 2025-03-04
2025-02-26 09:03:14,121 - options_data - INFO - Processing 69 put options for 2025-03-04
2025-02-26 09:03:14,121 - options_data - INFO - Processing data for expiration date: 2025-03-05
2025-02-26 09:03:14,121 - options_data - INFO - Processing 44 call options for 2025-03-05
2025-02-26 09:03:14,121 - options_data - INFO - Processing 63 put options for 2025-03-05
2025-02-26 09:03:14,122 - options_data - INFO - Processing data for expiration date: 2025-03-06
2025-02-26 09:03:14,122 - options_data - INFO - Processing 50 call options for 2025-03-06
2025-02-26 09:03:14,122 - options_data - INFO - Processing 59 put options for 2025-03-06
2025-02-26 09:03:14,122 - options_data - INFO - Processing data for expiration date: 2025-03-07
2025-02-26 09:03:14,122 - options_data - INFO - Processing 101 call options for 2025-03-07
2025-02-26 09:03:14,123 - options_data - INFO - Processing 93 put options for 2025-03-07
2025-02-26 09:03:14,124 - options_data - INFO - Combined data shape: (1323, 17)
2025-02-26 09:03:14,124 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:14,125 - options_data - INFO - Price range: 0.00 to 235.44
2025-02-26 09:03:14,125 - options_data - INFO - Strike range: 360.00 to 700.00
2025-02-26 09:03:14,125 - options_data - INFO - DTE range: 0 to 9
2025-02-26 09:03:14,125 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:14,125 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:14,126 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                     float64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:14,126 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:14,126 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:14,126 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:14,126 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:14,126 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:14,126 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:14,126 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:15,465 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:15,465 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:15,465 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:15,468 - options_data - INFO - Interpolated lastPrice for call
2025-02-26 09:03:15,470 - options_data - INFO - Interpolated bid for call
2025-02-26 09:03:15,472 - options_data - INFO - Interpolated ask for call
2025-02-26 09:03:15,474 - options_data - INFO - Interpolated change for call
2025-02-26 09:03:15,477 - options_data - INFO - Interpolated percentChange for call
2025-02-26 09:03:15,479 - options_data - INFO - Interpolated volume for call
2025-02-26 09:03:15,481 - options_data - INFO - Interpolated openInterest for call
2025-02-26 09:03:15,483 - options_data - INFO - Interpolated impliedVolatility for call
2025-02-26 09:03:15,485 - options_data - INFO - Interpolated inTheMoney for call
2025-02-26 09:03:15,487 - options_data - INFO - Interpolated spot for call
2025-02-26 09:03:15,489 - options_data - INFO - Interpolated price for call
2025-02-26 09:03:15,491 - options_data - INFO - Interpolated intrinsic_value for call
2025-02-26 09:03:15,493 - options_data - INFO - Interpolated extrinsic_value for call
2025-02-26 09:03:15,496 - options_data - INFO - Interpolated lastPrice for put
2025-02-26 09:03:15,498 - options_data - INFO - Interpolated bid for put
2025-02-26 09:03:15,501 - options_data - INFO - Interpolated ask for put
2025-02-26 09:03:15,503 - options_data - INFO - Interpolated change for put
2025-02-26 09:03:15,505 - options_data - INFO - Interpolated percentChange for put
2025-02-26 09:03:15,507 - options_data - INFO - Interpolated volume for put
2025-02-26 09:03:15,510 - options_data - INFO - Interpolated openInterest for put
2025-02-26 09:03:15,512 - options_data - INFO - Interpolated impliedVolatility for put
2025-02-26 09:03:15,514 - options_data - INFO - Interpolated inTheMoney for put
2025-02-26 09:03:15,517 - options_data - INFO - Interpolated spot for put
2025-02-26 09:03:15,519 - options_data - INFO - Interpolated price for put
2025-02-26 09:03:15,521 - options_data - INFO - Interpolated intrinsic_value for put
2025-02-26 09:03:15,523 - options_data - INFO - Interpolated extrinsic_value for put
2025-02-26 09:03:15,523 - options_data - INFO - Completed 2D interpolation
2025-02-26 09:03:15,523 - options_data - INFO - Found 8 expiration dates
2025-02-26 09:03:15,524 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/8)
2025-02-26 09:03:15,524 - __main__ - INFO - Re-applying interpolation with updated data
2025-02-26 09:03:15,524 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:15,524 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:15,525 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942711931  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:15,525 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942711931  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:15,699 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:15,699 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:15,699 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:15,699 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:15,700 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:15,700 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:15,700 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:15,701 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:15,701 - options_data - INFO - Processing data for expiration date: 2025-02-28
2025-02-26 09:03:15,701 - options_data - INFO - Processing 186 call options for 2025-02-28
2025-02-26 09:03:15,702 - options_data - INFO - Processing 176 put options for 2025-02-28
2025-02-26 09:03:15,702 - options_data - INFO - Processing data for expiration date: 2025-03-03
2025-02-26 09:03:15,702 - options_data - INFO - Processing 67 call options for 2025-03-03
2025-02-26 09:03:15,702 - options_data - INFO - Processing 73 put options for 2025-03-03
2025-02-26 09:03:15,703 - options_data - INFO - Processing data for expiration date: 2025-03-04
2025-02-26 09:03:15,703 - options_data - INFO - Processing 59 call options for 2025-03-04
2025-02-26 09:03:15,703 - options_data - INFO - Processing 69 put options for 2025-03-04
2025-02-26 09:03:15,703 - options_data - INFO - Processing data for expiration date: 2025-03-05
2025-02-26 09:03:15,704 - options_data - INFO - Processing 44 call options for 2025-03-05
2025-02-26 09:03:15,704 - options_data - INFO - Processing 63 put options for 2025-03-05
2025-02-26 09:03:15,704 - options_data - INFO - Processing data for expiration date: 2025-03-06
2025-02-26 09:03:15,704 - options_data - INFO - Processing 50 call options for 2025-03-06
2025-02-26 09:03:15,705 - options_data - INFO - Processing 59 put options for 2025-03-06
2025-02-26 09:03:15,705 - options_data - INFO - Processing data for expiration date: 2025-03-07
2025-02-26 09:03:15,705 - options_data - INFO - Processing 101 call options for 2025-03-07
2025-02-26 09:03:15,705 - options_data - INFO - Processing 93 put options for 2025-03-07
2025-02-26 09:03:15,706 - options_data - INFO - Processing data for expiration date: 2025-03-14
2025-02-26 09:03:15,706 - options_data - INFO - Processing 96 call options for 2025-03-14
2025-02-26 09:03:15,706 - options_data - INFO - Processing 95 put options for 2025-03-14
2025-02-26 09:03:15,708 - options_data - INFO - Combined data shape: (1514, 17)
2025-02-26 09:03:15,708 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:15,709 - options_data - INFO - Price range: 0.00 to 235.44
2025-02-26 09:03:15,709 - options_data - INFO - Strike range: 360.00 to 700.00
2025-02-26 09:03:15,709 - options_data - INFO - DTE range: 0 to 16
2025-02-26 09:03:15,709 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:15,709 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:15,710 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                     float64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:15,710 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:15,710 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:15,710 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:15,710 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:15,710 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:15,710 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:15,710 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
2025-02-26 09:03:17,245 - options_data - INFO - Successfully processed options data into xarray Dataset
2025-02-26 09:03:17,246 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:17,246 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:17,249 - options_data - INFO - Interpolated lastPrice for call
2025-02-26 09:03:17,252 - options_data - INFO - Interpolated bid for call
2025-02-26 09:03:17,254 - options_data - INFO - Interpolated ask for call
2025-02-26 09:03:17,257 - options_data - INFO - Interpolated change for call
2025-02-26 09:03:17,260 - options_data - INFO - Interpolated percentChange for call
2025-02-26 09:03:17,262 - options_data - INFO - Interpolated volume for call
2025-02-26 09:03:17,265 - options_data - INFO - Interpolated openInterest for call
2025-02-26 09:03:17,268 - options_data - INFO - Interpolated impliedVolatility for call
2025-02-26 09:03:17,270 - options_data - INFO - Interpolated inTheMoney for call
2025-02-26 09:03:17,273 - options_data - INFO - Interpolated spot for call
2025-02-26 09:03:17,275 - options_data - INFO - Interpolated price for call
2025-02-26 09:03:17,278 - options_data - INFO - Interpolated intrinsic_value for call
2025-02-26 09:03:17,280 - options_data - INFO - Interpolated extrinsic_value for call
2025-02-26 09:03:17,283 - options_data - INFO - Interpolated lastPrice for put
2025-02-26 09:03:17,286 - options_data - INFO - Interpolated bid for put
2025-02-26 09:03:17,288 - options_data - INFO - Interpolated ask for put
2025-02-26 09:03:17,291 - options_data - INFO - Interpolated change for put
2025-02-26 09:03:17,294 - options_data - INFO - Interpolated percentChange for put
2025-02-26 09:03:17,296 - options_data - INFO - Interpolated volume for put
2025-02-26 09:03:17,299 - options_data - INFO - Interpolated openInterest for put
2025-02-26 09:03:17,302 - options_data - INFO - Interpolated impliedVolatility for put
2025-02-26 09:03:17,304 - options_data - INFO - Interpolated inTheMoney for put
2025-02-26 09:03:17,307 - options_data - INFO - Interpolated spot for put
2025-02-26 09:03:17,309 - options_data - INFO - Interpolated price for put
2025-02-26 09:03:17,312 - options_data - INFO - Interpolated intrinsic_value for put
2025-02-26 09:03:17,315 - options_data - INFO - Interpolated extrinsic_value for put
2025-02-26 09:03:17,315 - options_data - INFO - Completed 2D interpolation
2025-02-26 09:03:17,315 - options_data - INFO - Found 9 expiration dates
2025-02-26 09:03:17,315 - __main__ - INFO - Updated expiry display: 2025-02-26 (1/9)
2025-02-26 09:03:17,316 - __main__ - INFO - Re-applying interpolation with updated data
2025-02-26 09:03:17,316 - options_data - INFO - Starting 2D interpolation of missing values
2025-02-26 09:03:17,316 - options_data - INFO - Interpolating numeric variables: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:17,316 - options_data - ERROR - Error during interpolation: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942745545  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.

2025-02-26 09:03:17,316 - options_data - ERROR - Traceback (most recent call last):
  File "/Users/reevefrancis/repos/options_visualizer/python/options_data.py", line 340, in interpolate_missing_values_2d
    interpolated_values = griddata(
        points_known, values_known, (strike_grid, dte_grid), method='linear'
    )
  File "/Users/reevefrancis/venvs/projects/lib/python3.13/site-packages/scipy/interpolate/_ndgriddata.py", line 323, in griddata
    ip = LinearNDInterpolator(points, values, fill_value=fill_value,
                              rescale=rescale)
  File "_interpnd.pyx", line 302, in scipy.interpolate._interpnd.LinearNDInterpolator.__init__
  File "_interpnd.pyx", line 93, in scipy.interpolate._interpnd.NDInterpolatorBase.__init__
  File "_interpnd.pyx", line 306, in scipy.interpolate._interpnd.LinearNDInterpolator._calculate_triangulation
  File "_qhull.pyx", line 1885, in scipy.spatial._qhull.Delaunay.__init__
  File "_qhull.pyx", line 352, in scipy.spatial._qhull._Qhull.__init__
scipy.spatial._qhull.QhullError: QH6154 Qhull precision error: Initial simplex is flat (facet 1 is coplanar with the interior point)

While executing:  | qhull d Qbb Qc Qt Q12 Qz
Options selected for Qhull 2019.1.r 2019/06/21:
  run-id 942745545  delaunay  Qbbound-last  Qcoplanar-keep  Qtriangulate
  Q12-allow-wide  Qz-infinity-point  _pre-merge  _zero-centrum  Qinterior-keep
  Pgood  _max-width 1.2e+02  Error-roundoff 9.6e-13  _one-merge 6.7e-12
  Visible-distance 1.9e-12  U-max-coplanar 1.9e-12  Width-outside 3.8e-12
  _wide-facet 1.1e-11  _maxoutside 7.7e-12

The input to qhull appears to be less than 3 dimensional, or a
computation has overflowed.

Qhull could not construct a clearly convex simplex from points:
- p1(v4): 5.7e+02     0    23
- p60(v3): 6.1e+02     0 6.9e+02
- p59(v2): 6.9e+02     0 5.3e+02
- p0(v1): 5.6e+02     0 1e-13

The center point is coplanar with a facet, or a vertex is coplanar
with a neighboring facet.  The maximum round off error for
computing distances is 9.6e-13.  The center point, facets and distances
to the center point are as follows:

center point    608.2        0    310.6

facet p60 p59 p0 distance=    0
facet p1 p59 p0 distance=    0
facet p1 p60 p0 distance=    0
facet p1 p60 p59 distance=    0

These points either have a maximum or minimum x-coordinate, or
they maximize the determinant for k coordinates.  Trial points
are first selected from points that maximize a coordinate.

The min and max coordinates for each dimension are:
  0:       565       690  difference=  125
  1:         0         0  difference=    0
  2:  1.049e-13       690  difference=  690

If the input should be full dimensional, you have several options that
may determine an initial simplex:
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QbB' to scale the points to the unit cube
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'En'  to specify a maximum roundoff error less than 9.6e-13.
  - trace execution with 'T3' to see the determinant for each point.

If the input is lower dimensional:
  - use 'QJ' to joggle the input and make it full dimensional
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
    pick the coordinate with the least range.  The hull will have the
    correct topology.
  - determine the flat containing the points, rotate the points
    into a coordinate plane, and delete the other coordinates.
  - add one or more points to make the input full dimensional.


2025-02-26 09:03:17,782 - yahoo_finance - INFO - Fetched 10/32 expiration dates for SPY
2025-02-26 09:03:17,782 - options_data - INFO - Initializing OptionsDataProcessor with current_price: 597.6579
2025-02-26 09:03:17,782 - options_data - INFO - Processing options data with current price: 597.6579
2025-02-26 09:03:17,782 - options_data - INFO - Processing data for expiration date: 2025-02-26
2025-02-26 09:03:17,782 - options_data - INFO - Processing 60 call options for 2025-02-26
2025-02-26 09:03:17,782 - options_data - INFO - Processing 79 put options for 2025-02-26
2025-02-26 09:03:17,783 - options_data - INFO - Processing data for expiration date: 2025-02-27
2025-02-26 09:03:17,783 - options_data - INFO - Processing 60 call options for 2025-02-27
2025-02-26 09:03:17,783 - options_data - INFO - Processing 84 put options for 2025-02-27
2025-02-26 09:03:17,783 - options_data - INFO - Processing data for expiration date: 2025-02-28
2025-02-26 09:03:17,783 - options_data - INFO - Processing 186 call options for 2025-02-28
2025-02-26 09:03:17,783 - options_data - INFO - Processing 176 put options for 2025-02-28
2025-02-26 09:03:17,783 - options_data - INFO - Processing data for expiration date: 2025-03-03
2025-02-26 09:03:17,784 - options_data - INFO - Processing 67 call options for 2025-03-03
2025-02-26 09:03:17,784 - options_data - INFO - Processing 73 put options for 2025-03-03
2025-02-26 09:03:17,784 - options_data - INFO - Processing data for expiration date: 2025-03-04
2025-02-26 09:03:17,784 - options_data - INFO - Processing 59 call options for 2025-03-04
2025-02-26 09:03:17,784 - options_data - INFO - Processing 69 put options for 2025-03-04
2025-02-26 09:03:17,784 - options_data - INFO - Processing data for expiration date: 2025-03-05
2025-02-26 09:03:17,784 - options_data - INFO - Processing 44 call options for 2025-03-05
2025-02-26 09:03:17,785 - options_data - INFO - Processing 63 put options for 2025-03-05
2025-02-26 09:03:17,785 - options_data - INFO - Processing data for expiration date: 2025-03-06
2025-02-26 09:03:17,785 - options_data - INFO - Processing 50 call options for 2025-03-06
2025-02-26 09:03:17,785 - options_data - INFO - Processing 59 put options for 2025-03-06
2025-02-26 09:03:17,785 - options_data - INFO - Processing data for expiration date: 2025-03-07
2025-02-26 09:03:17,785 - options_data - INFO - Processing 101 call options for 2025-03-07
2025-02-26 09:03:17,785 - options_data - INFO - Processing 93 put options for 2025-03-07
2025-02-26 09:03:17,785 - options_data - INFO - Processing data for expiration date: 2025-03-14
2025-02-26 09:03:17,786 - options_data - INFO - Processing 96 call options for 2025-03-14
2025-02-26 09:03:17,786 - options_data - INFO - Processing 95 put options for 2025-03-14
2025-02-26 09:03:17,786 - options_data - INFO - Processing data for expiration date: 2025-03-21
2025-02-26 09:03:17,786 - options_data - INFO - Processing 209 call options for 2025-03-21
2025-02-26 09:03:17,786 - options_data - INFO - Processing 184 put options for 2025-03-21
2025-02-26 09:03:17,787 - options_data - INFO - Combined data shape: (1907, 17)
2025-02-26 09:03:17,787 - options_data - INFO - Calculating additional metrics
2025-02-26 09:03:17,788 - options_data - INFO - Price range: 0.00 to 411.10
2025-02-26 09:03:17,788 - options_data - INFO - Strike range: 180.00 to 820.00
2025-02-26 09:03:17,788 - options_data - INFO - DTE range: 0 to 23
2025-02-26 09:03:17,788 - options_data - INFO - Converting to xarray Dataset
2025-02-26 09:03:17,788 - options_data - INFO - DataFrame columns: ['contractSymbol', 'lastTradeDate', 'strike', 'lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'contractSize', 'currency', 'option_type', 'expiration', 'DTE', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:17,788 - options_data - INFO - DataFrame dtypes: contractSymbol                    object
lastTradeDate        datetime64[ns, UTC]
strike                           float64
lastPrice                        float64
bid                              float64
ask                              float64
change                           float64
percentChange                    float64
volume                           float64
openInterest                     float64
impliedVolatility                float64
inTheMoney                          bool
contractSize                      object
currency                          object
option_type                       object
expiration                datetime64[ns]
DTE                                int64
spot                             float64
price                            float64
intrinsic_value                  float64
extrinsic_value                  float64
dtype: object
2025-02-26 09:03:17,788 - options_data - INFO - Added known string column: contractSymbol
2025-02-26 09:03:17,788 - options_data - INFO - Added known string column: lastTradeDate
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: lastPrice
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: bid
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: ask
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: change
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: percentChange
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: volume
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: openInterest
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: impliedVolatility
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: inTheMoney
2025-02-26 09:03:17,788 - options_data - INFO - Added known string column: contractSize
2025-02-26 09:03:17,788 - options_data - INFO - Added known string column: currency
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: spot
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: price
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: intrinsic_value
2025-02-26 09:03:17,788 - options_data - INFO - Detected numeric column: extrinsic_value
2025-02-26 09:03:17,788 - options_data - INFO - Numeric columns: ['lastPrice', 'bid', 'ask', 'change', 'percentChange', 'volume', 'openInterest', 'impliedVolatility', 'inTheMoney', 'spot', 'price', 'intrinsic_value', 'extrinsic_value']
2025-02-26 09:03:17,788 - options_data - INFO - String columns: ['contractSymbol', 'lastTradeDate', 'contractSize', 'currency']
```

### debug/test_fetch.log
```
=== New test session started at 2025-03-01 18:37:16 ===
2025-03-01 18:37:16,626 - test_fetch - INFO - Starting Options Data Fetch Test
2025-03-01 18:37:16,627 - test_fetch - INFO - Added to path: /Users/reevefrancis/repos/options_visualizer
2025-03-01 18:37:16,627 - test_fetch - INFO - Importing OptionsDataManager and OptionsDataProcessor
2025-03-01 18:37:16,971 - test_fetch - INFO - Successfully imported options_data modules
2025-03-01 18:37:16,971 - test_fetch - INFO - Starting main test function
2025-03-01 18:37:16,971 - test_fetch - INFO - === Testing options data fetch for SPY with max_dates=None ===
2025-03-01 18:37:16,971 - test_fetch - INFO - Initializing OptionsDataManager
2025-03-01 18:37:16,971 - python.options_data - INFO - Initializing OptionsDataManager with source=yahoo, model=market
2025-03-01 18:37:16,971 - test_fetch - INFO - OptionsDataManager initialized successfully
2025-03-01 18:37:16,971 - test_fetch - INFO - Fetching options data for SPY
2025-03-01 18:37:16,971 - python.options_data - INFO - Fetching options data for SPY from yahoo
2025-03-01 18:37:16,971 - python.yahoo_finance - INFO - Fetching fresh data for ticker: SPY
2025-03-01 18:37:16,971 - yfinance - DEBUG - get_raw_json(): https://query2.finance.yahoo.com/v10/finance/quoteSummary/SPY
2025-03-01 18:37:16,971 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:16,971 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:16,971 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v10/finance/quoteSummary/SPY
2025-03-01 18:37:16,971 - yfinance - DEBUG - params={'modules': 'financialData,quoteType,defaultKeyStatistics,assetProfile,summaryDetail', 'corsDomain': 'finance.yahoo.com', 'formatted': 'false', 'symbol': 'SPY'}
2025-03-01 18:37:16,971 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:16,971 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:16,971 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:16,972 - peewee - DEBUG - ('CREATE TABLE IF NOT EXISTS "_cookieschema" ("strategy" VARCHAR(255) NOT NULL PRIMARY KEY, "fetch_date" DATETIME NOT NULL, "cookie_bytes" BLOB NOT NULL) WITHOUT ROWID', [])
2025-03-01 18:37:16,972 - peewee - DEBUG - ('SELECT "t1"."strategy", "t1"."fetch_date", "t1"."cookie_bytes" FROM "_cookieschema" AS "t1" WHERE ("t1"."strategy" = ?) LIMIT ? OFFSET ?', ['basic', 1, 0])
2025-03-01 18:37:16,972 - yfinance - DEBUG - loaded persistent cookie
2025-03-01 18:37:16,972 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:16,977 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): query1.finance.yahoo.com:443
2025-03-01 18:37:17,086 - urllib3.connectionpool - DEBUG - https://query1.finance.yahoo.com:443 "GET /v1/test/getcrumb HTTP/1.1" 200 11
2025-03-01 18:37:17,086 - yfinance - DEBUG - crumb = 'QYduNcJ8qob'
2025-03-01 18:37:17,086 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,087 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:17,087 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): query2.finance.yahoo.com:443
2025-03-01 18:37:17,209 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v10/finance/quoteSummary/SPY?modules=financialData%2CquoteType%2CdefaultKeyStatistics%2CassetProfile%2CsummaryDetail&corsDomain=finance.yahoo.com&formatted=false&symbol=SPY&crumb=QYduNcJ8qob HTTP/1.1" 200 2006
2025-03-01 18:37:17,209 - yfinance - DEBUG - response code=200
2025-03-01 18:37:17,209 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:17,209 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:17,210 - yfinance - DEBUG - get_raw_json(): https://query1.finance.yahoo.com/v7/finance/quote?
2025-03-01 18:37:17,210 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:17,210 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:17,210 - yfinance - DEBUG - url=https://query1.finance.yahoo.com/v7/finance/quote?
2025-03-01 18:37:17,210 - yfinance - DEBUG - params={'symbols': 'SPY', 'formatted': 'false'}
2025-03-01 18:37:17,210 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:17,210 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:17,210 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,210 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:17,210 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:17,210 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,210 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:17,284 - urllib3.connectionpool - DEBUG - https://query1.finance.yahoo.com:443 "GET /v7/finance/quote?symbols=SPY&formatted=false&crumb=QYduNcJ8qob HTTP/1.1" 200 1069
2025-03-01 18:37:17,284 - yfinance - DEBUG - response code=200
2025-03-01 18:37:17,284 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:17,284 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:17,285 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:17,285 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:17,285 - yfinance - DEBUG - url=https://query1.finance.yahoo.com/ws/fundamentals-timeseries/v1/finance/timeseries/SPY?symbol=SPY&type=trailingPegRatio&period1=1725148800&period2=1740960000
2025-03-01 18:37:17,285 - yfinance - DEBUG - params=None
2025-03-01 18:37:17,285 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:17,285 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:17,285 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,285 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:17,285 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:17,285 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,285 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:17,359 - urllib3.connectionpool - DEBUG - https://query1.finance.yahoo.com:443 "GET /ws/fundamentals-timeseries/v1/finance/timeseries/SPY?symbol=SPY&type=trailingPegRatio&period1=1725148800&period2=1740960000&crumb=QYduNcJ8qob HTTP/1.1" 200 96
2025-03-01 18:37:17,359 - yfinance - DEBUG - response code=200
2025-03-01 18:37:17,359 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:17,359 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:17,360 - python.yahoo_finance - INFO - Got current price for SPY: 594.18
2025-03-01 18:37:17,360 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:17,360 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:17,360 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY
2025-03-01 18:37:17,360 - yfinance - DEBUG - params=None
2025-03-01 18:37:17,360 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:17,360 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:17,360 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,360 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:17,360 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:17,360 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,360 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:17,447 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:17,459 - yfinance - DEBUG - response code=200
2025-03-01 18:37:17,459 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:17,459 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:17,460 - python.yahoo_finance - INFO - Found 29 expiration dates for SPY
2025-03-01 18:37:17,468 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:17,468 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:17,468 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1740960000
2025-03-01 18:37:17,468 - yfinance - DEBUG - params=None
2025-03-01 18:37:17,468 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:17,469 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:17,469 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,469 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:17,469 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:17,469 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,469 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:17,554 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1740960000&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:17,558 - yfinance - DEBUG - response code=200
2025-03-01 18:37:17,558 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:17,558 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:17,566 - python.yahoo_finance - INFO - Fetched 1/29 expiration dates for SPY
2025-03-01 18:37:17,566 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:17,566 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:17,743 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:17,743 - python.options_data - INFO - Starting 1D interpolation of missing values
2025-03-01 18:37:17,744 - python.options_data - INFO - 1D interpolated lastPrice for call at DTE=2
2025-03-01 18:37:17,745 - python.options_data - INFO - 1D interpolated bid for call at DTE=2
2025-03-01 18:37:17,745 - python.options_data - INFO - 1D interpolated ask for call at DTE=2
2025-03-01 18:37:17,745 - python.options_data - INFO - 1D interpolated change for call at DTE=2
2025-03-01 18:37:17,745 - python.options_data - INFO - 1D interpolated percentChange for call at DTE=2
2025-03-01 18:37:17,746 - python.options_data - INFO - 1D interpolated impliedVolatility for call at DTE=2
2025-03-01 18:37:17,746 - python.options_data - INFO - 1D interpolated inTheMoney for call at DTE=2
2025-03-01 18:37:17,746 - python.options_data - INFO - 1D interpolated spot for call at DTE=2
2025-03-01 18:37:17,747 - python.options_data - INFO - 1D interpolated price for call at DTE=2
2025-03-01 18:37:17,747 - python.options_data - INFO - 1D interpolated intrinsic_value for call at DTE=2
2025-03-01 18:37:17,747 - python.options_data - INFO - 1D interpolated extrinsic_value for call at DTE=2
2025-03-01 18:37:17,747 - python.options_data - INFO - 1D interpolated lastPrice for put at DTE=2
2025-03-01 18:37:17,748 - python.options_data - INFO - 1D interpolated bid for put at DTE=2
2025-03-01 18:37:17,748 - python.options_data - INFO - 1D interpolated ask for put at DTE=2
2025-03-01 18:37:17,748 - python.options_data - INFO - 1D interpolated change for put at DTE=2
2025-03-01 18:37:17,749 - python.options_data - INFO - 1D interpolated percentChange for put at DTE=2
2025-03-01 18:37:17,749 - python.options_data - INFO - 1D interpolated impliedVolatility for put at DTE=2
2025-03-01 18:37:17,749 - python.options_data - INFO - 1D interpolated inTheMoney for put at DTE=2
2025-03-01 18:37:17,750 - python.options_data - INFO - 1D interpolated spot for put at DTE=2
2025-03-01 18:37:17,750 - python.options_data - INFO - 1D interpolated price for put at DTE=2
2025-03-01 18:37:17,750 - python.options_data - INFO - 1D interpolated intrinsic_value for put at DTE=2
2025-03-01 18:37:17,750 - python.options_data - INFO - 1D interpolated extrinsic_value for put at DTE=2
2025-03-01 18:37:17,755 - python.options_data - ERROR - Error creating temporary processor: index 0 is out of bounds for axis 0 with size 0
2025-03-01 18:37:17,755 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:17,755 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:17,755 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1741046400
2025-03-01 18:37:17,755 - yfinance - DEBUG - params=None
2025-03-01 18:37:17,755 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:17,755 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:17,755 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,755 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:17,755 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:17,755 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:17,755 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:17,856 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1741046400&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:17,857 - yfinance - DEBUG - response code=200
2025-03-01 18:37:17,857 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:17,857 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:17,859 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:17,859 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:18,147 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:18,148 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:18,149 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:18,149 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:18,150 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:18,150 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:18,151 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:18,151 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:18,152 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:18,152 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:18,153 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:18,153 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:18,154 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:18,155 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:18,156 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:18,156 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:18,157 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:18,157 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:18,158 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:18,159 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:18,159 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:18,160 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:18,161 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:18,161 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:18,166 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:18,166 - peewee - DEBUG - ('CREATE TABLE IF NOT EXISTS "_kv" ("key" VARCHAR(255) NOT NULL PRIMARY KEY, "value" VARCHAR(255)) WITHOUT ROWID', [])
2025-03-01 18:37:18,166 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:18,175 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:18,175 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:18,175 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:18,175 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:18,175 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:18,175 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:18,175 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:18,175 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:18,175 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:18,175 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:18,175 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:18,175 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:18,175 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:18,245 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:18,245 - yfinance - DEBUG - response code=200
2025-03-01 18:37:18,245 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:18,245 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:18,246 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:18,247 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:18,248 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:18,249 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:18,249 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:18,249 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:18,249 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:18,250 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:18,250 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:18,250 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1741132800
2025-03-01 18:37:18,250 - yfinance - DEBUG - params=None
2025-03-01 18:37:18,250 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:18,250 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:18,250 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:18,250 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:18,250 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:18,250 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:18,250 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:18,328 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1741132800&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:18,329 - yfinance - DEBUG - response code=200
2025-03-01 18:37:18,329 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:18,329 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:18,331 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:18,331 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:18,738 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:18,738 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:18,739 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:18,740 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:18,741 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:18,741 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:18,742 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:18,743 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:18,743 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:18,744 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:18,745 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:18,746 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:18,746 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:18,747 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:18,748 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:18,749 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:18,749 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:18,750 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:18,751 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:18,752 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:18,753 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:18,754 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:18,755 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:18,755 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:18,760 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:18,760 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:18,760 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:18,760 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:18,760 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:18,760 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:18,760 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:18,760 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:18,760 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:18,760 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:18,760 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:18,760 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:18,760 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:18,760 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:18,760 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:18,775 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:18,775 - yfinance - DEBUG - response code=200
2025-03-01 18:37:18,775 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:18,776 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:18,776 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:18,776 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:18,777 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:18,778 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:18,778 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:18,778 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:18,778 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:18,778 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:18,778 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:18,778 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1741219200
2025-03-01 18:37:18,778 - yfinance - DEBUG - params=None
2025-03-01 18:37:18,778 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:18,778 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:18,778 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:18,778 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:18,778 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:18,778 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:18,778 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:18,867 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1741219200&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:18,867 - yfinance - DEBUG - response code=200
2025-03-01 18:37:18,868 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:18,868 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:18,870 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:18,870 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:19,393 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:19,393 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:19,395 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:19,395 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:19,396 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:19,397 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:19,398 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:19,399 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:19,400 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:19,401 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:19,402 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:19,403 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:19,403 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:19,404 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:19,406 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:19,406 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:19,407 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:19,408 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:19,409 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:19,410 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:19,411 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:19,412 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:19,413 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:19,414 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:19,418 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:19,419 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:19,419 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:19,419 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:19,419 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:19,419 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:19,419 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:19,419 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:19,419 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:19,419 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:19,419 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:19,419 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:19,419 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:19,419 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:19,419 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:19,473 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:19,473 - yfinance - DEBUG - response code=200
2025-03-01 18:37:19,473 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:19,473 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:19,474 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:19,474 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:19,475 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:19,476 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:19,476 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:19,476 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:19,476 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:19,477 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:19,477 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:19,477 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1741305600
2025-03-01 18:37:19,477 - yfinance - DEBUG - params=None
2025-03-01 18:37:19,477 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:19,477 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:19,477 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:19,477 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:19,477 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:19,477 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:19,477 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:19,602 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1741305600&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:19,672 - yfinance - DEBUG - response code=200
2025-03-01 18:37:19,672 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:19,673 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:19,679 - python.yahoo_finance - INFO - Fetched 5/29 expiration dates for SPY
2025-03-01 18:37:19,679 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:19,679 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:20,405 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:20,406 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:20,407 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:20,409 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:20,410 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:20,411 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:20,413 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:20,414 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:20,415 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:20,417 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:20,418 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:20,419 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:20,421 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:20,422 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:20,423 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:20,425 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:20,426 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:20,427 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:20,429 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:20,430 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:20,431 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:20,432 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:20,434 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:20,435 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:20,439 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:20,439 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:20,439 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:20,439 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:20,439 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:20,439 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:20,439 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:20,439 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:20,440 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:20,440 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:20,440 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:20,440 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:20,440 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:20,440 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:20,440 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:20,469 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:20,469 - yfinance - DEBUG - response code=200
2025-03-01 18:37:20,469 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:20,469 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:20,469 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:20,470 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:20,470 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:20,472 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:20,472 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:20,472 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:20,472 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:20,472 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:20,472 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:20,472 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1741910400
2025-03-01 18:37:20,472 - yfinance - DEBUG - params=None
2025-03-01 18:37:20,472 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:20,472 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:20,472 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:20,472 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:20,472 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:20,472 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:20,472 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:20,613 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1741910400&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:20,653 - yfinance - DEBUG - response code=200
2025-03-01 18:37:20,653 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:20,654 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:20,658 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:20,658 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:21,580 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:21,580 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:21,582 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:21,583 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:21,585 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:21,587 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:21,589 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:21,590 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:21,592 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:21,593 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:21,595 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:21,597 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:21,598 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:21,600 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:21,602 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:21,604 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:21,606 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:21,607 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:21,609 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:21,611 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:21,612 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:21,614 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:21,616 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:21,617 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:21,622 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:21,622 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:21,622 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:21,622 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:21,622 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:21,622 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:21,622 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:21,622 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:21,622 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:21,622 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:21,622 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:21,622 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:21,622 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:21,622 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:21,622 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:21,687 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:21,687 - yfinance - DEBUG - response code=200
2025-03-01 18:37:21,687 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:21,687 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:21,687 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:21,688 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:21,689 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:21,690 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:21,690 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:21,690 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:21,690 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:21,690 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:21,690 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:21,690 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1742515200
2025-03-01 18:37:21,690 - yfinance - DEBUG - params=None
2025-03-01 18:37:21,690 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:21,690 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:21,690 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:21,690 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:21,691 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:21,691 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:21,691 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:21,837 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1742515200&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:21,957 - yfinance - DEBUG - response code=200
2025-03-01 18:37:21,957 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:21,957 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:21,968 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:21,968 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:23,291 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:23,291 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:23,294 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:23,297 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:23,300 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:23,302 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:23,305 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:23,308 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:23,310 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:23,313 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:23,315 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:23,318 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:23,320 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:23,323 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:23,325 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:23,327 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:23,330 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:23,333 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:23,335 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:23,338 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:23,340 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:23,342 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:23,345 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:23,348 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:23,352 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:23,352 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:23,352 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:23,352 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:23,352 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:23,352 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:23,352 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:23,352 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:23,352 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:23,352 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:23,352 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:23,352 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:23,352 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:23,352 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:23,352 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:23,389 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:23,389 - yfinance - DEBUG - response code=200
2025-03-01 18:37:23,389 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:23,389 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:23,389 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:23,390 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:23,390 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:23,392 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:23,392 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:23,392 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:23,392 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:23,392 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:23,392 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:23,392 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1743120000
2025-03-01 18:37:23,392 - yfinance - DEBUG - params=None
2025-03-01 18:37:23,392 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:23,392 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:23,392 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:23,392 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:23,392 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:23,392 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:23,392 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:23,481 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1743120000&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:23,580 - yfinance - DEBUG - response code=200
2025-03-01 18:37:23,580 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:23,581 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:23,586 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:23,586 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:25,116 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:25,116 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:25,119 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:25,122 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:25,125 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:25,128 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:25,131 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:25,133 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:25,136 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:25,138 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:25,141 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:25,144 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:25,147 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:25,150 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:25,152 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:25,155 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:25,158 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:25,160 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:25,163 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:25,165 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:25,168 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:25,170 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:25,173 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:25,176 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:25,180 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:25,180 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:25,180 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:25,180 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:25,180 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:25,180 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:25,181 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:25,181 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:25,181 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:25,181 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:25,181 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:25,181 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:25,181 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:25,181 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:25,181 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:25,242 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:25,242 - yfinance - DEBUG - response code=200
2025-03-01 18:37:25,242 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:25,242 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:25,243 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:25,243 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:25,244 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:25,246 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:25,246 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:25,246 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:25,246 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:25,246 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:25,246 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:25,246 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1743379200
2025-03-01 18:37:25,246 - yfinance - DEBUG - params=None
2025-03-01 18:37:25,246 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:25,246 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:25,246 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:25,246 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:25,246 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:25,246 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:25,246 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:25,358 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1743379200&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:25,434 - yfinance - DEBUG - response code=200
2025-03-01 18:37:25,434 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:25,434 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:25,444 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:25,444 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:27,394 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:27,395 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:27,399 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:27,402 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:27,406 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:27,409 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:27,413 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:27,417 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:27,421 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:27,424 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:27,428 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:27,432 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:27,435 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:27,439 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:27,443 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:27,446 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:27,450 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:27,454 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:27,457 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:27,461 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:27,464 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:27,468 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:27,471 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:27,475 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:27,479 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:27,479 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:27,480 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:27,480 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:27,480 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:27,480 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:27,480 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:27,480 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:27,480 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:27,480 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:27,480 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:27,480 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:27,480 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:27,480 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:27,480 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:27,524 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:27,524 - yfinance - DEBUG - response code=200
2025-03-01 18:37:27,524 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:27,524 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:27,524 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:27,525 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:27,525 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:27,527 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:27,527 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:27,527 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:27,527 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:27,527 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:27,527 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:27,527 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1743724800
2025-03-01 18:37:27,527 - yfinance - DEBUG - params=None
2025-03-01 18:37:27,527 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:27,527 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:27,527 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:27,527 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:27,527 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:27,527 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:27,527 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:27,787 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1743724800&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:27,815 - yfinance - DEBUG - response code=200
2025-03-01 18:37:27,815 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:27,815 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:27,819 - python.yahoo_finance - INFO - Fetched 10/29 expiration dates for SPY
2025-03-01 18:37:27,819 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:27,819 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:29,993 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:29,993 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:29,997 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:30,001 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:30,004 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:30,008 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:30,011 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:30,015 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:30,019 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:30,022 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:30,026 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:30,029 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:30,033 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:30,037 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:30,040 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:30,044 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:30,048 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:30,051 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:30,055 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:30,058 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:30,062 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:30,066 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:30,069 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:30,073 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:30,077 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:30,077 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:30,078 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:30,078 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:30,078 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:30,078 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:30,078 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:30,078 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:30,078 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:30,078 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:30,078 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:30,078 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:30,078 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:30,078 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:30,078 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:30,208 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:30,208 - yfinance - DEBUG - response code=200
2025-03-01 18:37:30,208 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:30,208 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:30,209 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:30,209 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:30,210 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:30,212 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:30,212 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:30,212 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:30,213 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:30,213 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:30,213 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:30,213 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1744848000
2025-03-01 18:37:30,213 - yfinance - DEBUG - params=None
2025-03-01 18:37:30,213 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:30,213 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:30,213 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:30,213 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:30,213 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:30,213 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:30,213 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:30,351 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1744848000&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:30,378 - yfinance - DEBUG - response code=200
2025-03-01 18:37:30,378 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:30,378 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:30,386 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:30,386 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:32,982 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:32,982 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:32,987 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:32,992 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:32,997 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:33,001 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:33,006 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:33,011 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:33,015 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:33,020 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:33,025 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:33,030 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:33,034 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:33,039 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:33,044 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:33,048 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:33,052 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:33,057 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:33,061 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:33,066 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:33,070 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:33,075 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:33,080 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:33,084 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:33,089 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:33,089 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:33,089 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:33,089 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:33,089 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:33,089 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:33,089 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:33,089 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:33,089 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:33,089 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:33,089 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:33,089 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:33,089 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:33,089 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:33,089 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:33,124 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:33,124 - yfinance - DEBUG - response code=200
2025-03-01 18:37:33,124 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:33,124 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:33,125 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:33,125 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:33,125 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:33,127 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:33,127 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:33,127 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:33,127 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:33,127 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:33,127 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:33,127 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1745971200
2025-03-01 18:37:33,127 - yfinance - DEBUG - params=None
2025-03-01 18:37:33,127 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:33,127 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:33,127 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:33,127 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:33,127 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:33,127 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:33,127 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:33,242 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1745971200&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:33,280 - yfinance - DEBUG - response code=200
2025-03-01 18:37:33,280 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:33,280 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:33,285 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:33,285 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:36,184 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:36,185 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:36,190 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:36,195 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:36,200 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:36,206 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:36,211 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:36,216 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:36,222 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:36,227 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:36,232 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:36,238 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:36,243 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:36,248 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:36,253 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:36,257 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:36,262 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:36,267 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:36,272 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:36,277 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:36,282 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:36,287 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:36,292 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:36,297 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:36,301 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:36,302 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:36,302 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:36,302 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:36,302 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:36,302 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:36,302 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:36,302 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:36,302 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:36,302 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:36,302 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:36,302 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:36,302 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:36,302 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:36,302 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:36,321 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:36,322 - yfinance - DEBUG - response code=200
2025-03-01 18:37:36,322 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:36,322 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:36,323 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:36,323 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:36,324 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:36,325 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:36,325 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:36,325 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:36,325 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:36,325 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:36,325 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:36,325 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1747353600
2025-03-01 18:37:36,325 - yfinance - DEBUG - params=None
2025-03-01 18:37:36,325 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:36,325 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:36,325 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:36,325 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:36,325 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:36,325 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:36,325 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:36,420 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1747353600&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:36,447 - yfinance - DEBUG - response code=200
2025-03-01 18:37:36,447 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:36,447 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:36,451 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:36,451 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:39,612 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:39,612 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:39,618 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:39,624 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:39,630 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:39,636 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:39,642 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:39,648 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:39,654 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:39,659 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:39,665 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:39,671 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:39,676 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:39,682 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:39,687 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:39,693 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:39,698 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:39,703 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:39,709 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:39,714 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:39,719 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:39,725 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:39,730 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:39,736 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:39,740 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:39,740 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:39,740 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:39,740 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:39,740 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:39,740 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:39,740 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:39,741 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:39,741 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:39,741 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:39,741 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:39,741 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:39,741 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:39,741 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:39,741 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:39,799 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:39,799 - yfinance - DEBUG - response code=200
2025-03-01 18:37:39,799 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:39,799 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:39,799 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:39,800 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:39,800 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:39,802 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:39,802 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:39,802 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:39,802 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:39,802 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:39,802 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:39,802 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1748563200
2025-03-01 18:37:39,802 - yfinance - DEBUG - params=None
2025-03-01 18:37:39,802 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:39,802 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:39,802 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:39,802 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:39,802 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:39,802 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:39,802 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:39,928 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1748563200&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:39,995 - yfinance - DEBUG - response code=200
2025-03-01 18:37:39,995 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:39,996 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:40,001 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:40,001 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:37:43,517 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:37:43,518 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:37:43,524 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:37:43,530 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:37:43,536 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:37:43,543 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:37:43,549 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:37:43,555 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:37:43,561 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:37:43,566 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:37:43,572 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:37:43,578 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:37:43,585 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:37:43,591 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:37:43,597 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:37:43,602 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:37:43,608 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:37:43,615 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:37:43,620 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:37:43,626 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:37:43,632 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:37:43,638 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:37:43,644 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:37:43,650 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:37:43,654 - yfinance - DEBUG - Entering history()
2025-03-01 18:37:43,655 - peewee - DEBUG - ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^TNX', 1, 0])
2025-03-01 18:37:43,655 - yfinance - DEBUG -  Entering history()
2025-03-01 18:37:43,655 - yfinance - DEBUG - ^TNX: Yahoo GET parameters: {'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:43,655 - yfinance - DEBUG -   Entering get()
2025-03-01 18:37:43,655 - yfinance - DEBUG -    Entering _make_request()
2025-03-01 18:37:43,655 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v8/finance/chart/^TNX
2025-03-01 18:37:43,655 - yfinance - DEBUG - params={'range': '1d', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-03-01 18:37:43,655 - yfinance - DEBUG -     Entering _get_cookie_and_crumb()
2025-03-01 18:37:43,655 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:43,655 - yfinance - DEBUG -      Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:43,655 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:43,655 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:43,655 - yfinance - DEBUG -      Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:43,655 - yfinance - DEBUG -     Exiting _get_cookie_and_crumb()
2025-03-01 18:37:43,763 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v8/finance/chart/%5ETNX?range=1d&interval=1d&includePrePost=False&events=div%2Csplits%2CcapitalGains&crumb=QYduNcJ8qob HTTP/1.1" 200 1209
2025-03-01 18:37:43,763 - yfinance - DEBUG - response code=200
2025-03-01 18:37:43,763 - yfinance - DEBUG -    Exiting _make_request()
2025-03-01 18:37:43,763 - yfinance - DEBUG -   Exiting get()
2025-03-01 18:37:43,763 - yfinance - DEBUG - ^TNX: yfinance received OHLC data: 2025-02-28 13:20:00 only
2025-03-01 18:37:43,764 - yfinance - DEBUG - ^TNX: OHLC after cleaning: 2025-02-28 07:20:00-06:00 only
2025-03-01 18:37:43,764 - yfinance - DEBUG - ^TNX: OHLC after combining events: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:43,766 - yfinance - DEBUG - ^TNX: yfinance returning OHLC: 2025-02-28 00:00:00-06:00 only
2025-03-01 18:37:43,766 - yfinance - DEBUG -  Exiting history()
2025-03-01 18:37:43,766 - yfinance - DEBUG - Exiting history()
2025-03-01 18:37:43,766 - python.options_data - ERROR - Error creating temporary processor: name 'time' is not defined
2025-03-01 18:37:43,766 - yfinance - DEBUG - Entering get()
2025-03-01 18:37:43,767 - yfinance - DEBUG -  Entering _make_request()
2025-03-01 18:37:43,767 - yfinance - DEBUG - url=https://query2.finance.yahoo.com/v7/finance/options/SPY?date=1750377600
2025-03-01 18:37:43,767 - yfinance - DEBUG - params=None
2025-03-01 18:37:43,767 - yfinance - DEBUG -   Entering _get_cookie_and_crumb()
2025-03-01 18:37:43,767 - yfinance - DEBUG - cookie_mode = 'basic'
2025-03-01 18:37:43,767 - yfinance - DEBUG -    Entering _get_cookie_and_crumb_basic()
2025-03-01 18:37:43,767 - yfinance - DEBUG - reusing cookie
2025-03-01 18:37:43,767 - yfinance - DEBUG - reusing crumb
2025-03-01 18:37:43,767 - yfinance - DEBUG -    Exiting _get_cookie_and_crumb_basic()
2025-03-01 18:37:43,767 - yfinance - DEBUG -   Exiting _get_cookie_and_crumb()
2025-03-01 18:37:43,867 - urllib3.connectionpool - DEBUG - https://query2.finance.yahoo.com:443 "GET /v7/finance/options/SPY?date=1750377600&crumb=QYduNcJ8qob HTTP/1.1" 200 None
2025-03-01 18:37:43,894 - yfinance - DEBUG - response code=200
2025-03-01 18:37:43,894 - yfinance - DEBUG -  Exiting _make_request()
2025-03-01 18:37:43,894 - yfinance - DEBUG - Exiting get()
2025-03-01 18:37:43,897 - python.yahoo_finance - INFO - Fetched 15/29 expiration dates for SPY
2025-03-01 18:37:43,897 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:37:43,897 - python.options_data - INFO - Processing options data with current price: 594.18
```

### debug/web_app.log
```
=== New session started at 2025-03-01 18:54:19 ===
2025-03-01 18:54:19,098 - __main__ - INFO - Starting Options Visualizer Web App
2025-03-01 18:54:19,099 - __main__ - INFO - Static folder: /Users/reevefrancis/repos/options_visualizer/options_visualizer_web/static
2025-03-01 18:54:19,099 - __main__ - INFO - Template folder: /Users/reevefrancis/repos/options_visualizer/options_visualizer_web/templates
2025-03-01 18:54:19,099 - python.options_data - INFO - Initializing OptionsDataManager with source=yahoo, model=market
2025-03-01 18:54:19,112 - werkzeug - WARNING -  * Debugger is active!
2025-03-01 18:54:19,117 - werkzeug - INFO -  * Debugger PIN: 797-671-465
2025-03-01 18:54:24,106 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 18:54:24] "GET / HTTP/1.1" 200 -
2025-03-01 18:54:24,116 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 18:54:24] "GET /static/js/main.js HTTP/1.1" 200 -
2025-03-01 18:54:24,116 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 18:54:24] "[36mGET /static/css/style.css HTTP/1.1[0m" 304 -
2025-03-01 18:54:24,289 - __main__ - INFO - Fetching options data for SPY
2025-03-01 18:54:24,289 - python.options_data - INFO - Fetching options data for SPY from yahoo
2025-03-01 18:54:24,289 - python.yahoo_finance - INFO - Fetching fresh data for ticker: SPY
2025-03-01 18:54:24,753 - python.yahoo_finance - INFO - Got current price for SPY: 594.18
2025-03-01 18:54:24,867 - python.yahoo_finance - INFO - Found 29 expiration dates for SPY
2025-03-01 18:54:24,982 - python.yahoo_finance - INFO - Fetched 1/29 expiration dates for SPY
2025-03-01 18:54:24,982 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:24,982 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:25,146 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:25,146 - python.options_data - INFO - Starting 1D interpolation of missing values
2025-03-01 18:54:25,147 - python.options_data - INFO - 1D interpolated lastPrice for call at DTE=2
2025-03-01 18:54:25,147 - python.options_data - INFO - 1D interpolated bid for call at DTE=2
2025-03-01 18:54:25,147 - python.options_data - INFO - 1D interpolated ask for call at DTE=2
2025-03-01 18:54:25,148 - python.options_data - INFO - 1D interpolated change for call at DTE=2
2025-03-01 18:54:25,148 - python.options_data - INFO - 1D interpolated percentChange for call at DTE=2
2025-03-01 18:54:25,148 - python.options_data - INFO - 1D interpolated impliedVolatility for call at DTE=2
2025-03-01 18:54:25,149 - python.options_data - INFO - 1D interpolated inTheMoney for call at DTE=2
2025-03-01 18:54:25,149 - python.options_data - INFO - 1D interpolated spot for call at DTE=2
2025-03-01 18:54:25,149 - python.options_data - INFO - 1D interpolated price for call at DTE=2
2025-03-01 18:54:25,149 - python.options_data - INFO - 1D interpolated intrinsic_value for call at DTE=2
2025-03-01 18:54:25,150 - python.options_data - INFO - 1D interpolated extrinsic_value for call at DTE=2
2025-03-01 18:54:25,150 - python.options_data - INFO - 1D interpolated lastPrice for put at DTE=2
2025-03-01 18:54:25,150 - python.options_data - INFO - 1D interpolated bid for put at DTE=2
2025-03-01 18:54:25,151 - python.options_data - INFO - 1D interpolated ask for put at DTE=2
2025-03-01 18:54:25,151 - python.options_data - INFO - 1D interpolated change for put at DTE=2
2025-03-01 18:54:25,152 - python.options_data - INFO - 1D interpolated percentChange for put at DTE=2
2025-03-01 18:54:25,152 - python.options_data - INFO - 1D interpolated impliedVolatility for put at DTE=2
2025-03-01 18:54:25,152 - python.options_data - INFO - 1D interpolated inTheMoney for put at DTE=2
2025-03-01 18:54:25,153 - python.options_data - INFO - 1D interpolated spot for put at DTE=2
2025-03-01 18:54:25,153 - python.options_data - INFO - 1D interpolated price for put at DTE=2
2025-03-01 18:54:25,153 - python.options_data - INFO - 1D interpolated intrinsic_value for put at DTE=2
2025-03-01 18:54:25,154 - python.options_data - INFO - 1D interpolated extrinsic_value for put at DTE=2
2025-03-01 18:54:25,158 - python.options_data - ERROR - Error creating temporary processor: index 0 is out of bounds for axis 0 with size 0
2025-03-01 18:54:25,158 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:25,158 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:25,307 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:25,308 - python.options_data - INFO - Starting 1D interpolation of missing values
2025-03-01 18:54:25,308 - python.options_data - INFO - 1D interpolated lastPrice for call at DTE=2
2025-03-01 18:54:25,309 - python.options_data - INFO - 1D interpolated bid for call at DTE=2
2025-03-01 18:54:25,309 - python.options_data - INFO - 1D interpolated ask for call at DTE=2
2025-03-01 18:54:25,309 - python.options_data - INFO - 1D interpolated change for call at DTE=2
2025-03-01 18:54:25,310 - python.options_data - INFO - 1D interpolated percentChange for call at DTE=2
2025-03-01 18:54:25,310 - python.options_data - INFO - 1D interpolated impliedVolatility for call at DTE=2
2025-03-01 18:54:25,310 - python.options_data - INFO - 1D interpolated inTheMoney for call at DTE=2
2025-03-01 18:54:25,311 - python.options_data - INFO - 1D interpolated spot for call at DTE=2
2025-03-01 18:54:25,311 - python.options_data - INFO - 1D interpolated price for call at DTE=2
2025-03-01 18:54:25,311 - python.options_data - INFO - 1D interpolated intrinsic_value for call at DTE=2
2025-03-01 18:54:25,311 - python.options_data - INFO - 1D interpolated extrinsic_value for call at DTE=2
2025-03-01 18:54:25,312 - python.options_data - INFO - 1D interpolated lastPrice for put at DTE=2
2025-03-01 18:54:25,312 - python.options_data - INFO - 1D interpolated bid for put at DTE=2
2025-03-01 18:54:25,312 - python.options_data - INFO - 1D interpolated ask for put at DTE=2
2025-03-01 18:54:25,313 - python.options_data - INFO - 1D interpolated change for put at DTE=2
2025-03-01 18:54:25,313 - python.options_data - INFO - 1D interpolated percentChange for put at DTE=2
2025-03-01 18:54:25,314 - python.options_data - INFO - 1D interpolated impliedVolatility for put at DTE=2
2025-03-01 18:54:25,314 - python.options_data - INFO - 1D interpolated inTheMoney for put at DTE=2
2025-03-01 18:54:25,315 - python.options_data - INFO - 1D interpolated spot for put at DTE=2
2025-03-01 18:54:25,315 - python.options_data - INFO - 1D interpolated price for put at DTE=2
2025-03-01 18:54:25,315 - python.options_data - INFO - 1D interpolated intrinsic_value for put at DTE=2
2025-03-01 18:54:25,316 - python.options_data - INFO - 1D interpolated extrinsic_value for put at DTE=2
2025-03-01 18:54:25,321 - python.yahoo_finance - ERROR - Error fetching option chain for 2025-03-03: index 0 is out of bounds for axis 0 with size 0
2025-03-01 18:54:25,408 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:25,408 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:25,714 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:25,714 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:25,715 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:25,716 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:25,717 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:25,717 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:25,718 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:25,718 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:25,719 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:25,719 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:25,720 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:25,720 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:25,721 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:25,722 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:25,722 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:25,723 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:25,724 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:25,724 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:25,725 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:25,725 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:25,726 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:25,727 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:25,727 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:25,728 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:25,847 - python.options_data - INFO - Updated cache with partial data for SPY (2/29 dates)
2025-03-01 18:54:25,847 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:25,847 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:26,137 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:26,137 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:26,138 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:26,138 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:26,139 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:26,140 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:26,140 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:26,141 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:26,141 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:26,142 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:26,143 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:26,143 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:26,144 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:26,144 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:26,145 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:26,146 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:26,146 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:26,147 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:26,148 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:26,148 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:26,149 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:26,150 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:26,150 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:26,151 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:26,326 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:26,326 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:26,735 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:26,735 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:26,737 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:26,737 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:26,738 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:26,739 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:26,739 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:26,740 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:26,741 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:26,742 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:26,743 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:26,743 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:26,744 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:26,745 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:26,746 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:26,747 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:26,747 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:26,748 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:26,749 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:26,750 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:26,751 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:26,752 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:26,753 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:26,754 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:26,780 - python.options_data - INFO - Updated cache with partial data for SPY (3/29 dates)
2025-03-01 18:54:26,780 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:26,780 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:27,173 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:27,173 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:27,174 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:27,175 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:27,176 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:27,176 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:27,177 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:27,177 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:27,178 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:27,179 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:27,180 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:27,180 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:27,181 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:27,182 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:27,183 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:27,183 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:27,184 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:27,185 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:27,186 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:27,186 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:27,187 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:27,188 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:27,189 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:27,190 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:27,319 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:27,319 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:27,839 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:27,840 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:27,841 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:27,842 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:27,843 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:27,844 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:27,845 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:27,846 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:27,847 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:27,848 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:27,849 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:27,850 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:27,850 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:27,852 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:27,853 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:27,854 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:27,855 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:27,856 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:27,858 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:27,859 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:27,860 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:27,861 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:27,862 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:27,863 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:27,920 - python.options_data - INFO - Updated cache with partial data for SPY (4/29 dates)
2025-03-01 18:54:27,920 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:27,920 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:28,433 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:28,434 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:28,435 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:28,436 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:28,437 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:28,437 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:28,438 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:28,439 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:28,440 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:28,441 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:28,442 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:28,443 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:28,444 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:28,446 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:28,447 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:28,448 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:28,449 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:28,450 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:28,451 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:28,452 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:28,453 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:28,454 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:28,455 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:28,456 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:28,627 - python.yahoo_finance - INFO - Fetched 5/29 expiration dates for SPY
2025-03-01 18:54:28,627 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:28,627 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:29,349 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:29,349 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:29,351 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:29,352 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:29,353 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:29,355 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:29,357 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:29,358 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:29,359 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:29,360 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:29,362 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:29,363 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:29,365 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:29,366 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:29,368 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:29,369 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:29,371 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:29,372 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:29,373 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:29,375 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:29,376 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:29,377 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:29,379 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:29,380 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:29,428 - python.options_data - INFO - Updated cache with partial data for SPY (5/29 dates)
2025-03-01 18:54:29,428 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:29,428 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:30,146 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:30,146 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:30,148 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:30,149 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:30,150 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:30,152 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:30,153 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:30,154 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:30,155 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:30,156 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:30,158 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:30,159 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:30,160 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:30,161 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:30,163 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:30,164 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:30,165 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:30,167 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:30,168 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:30,169 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:30,171 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:30,172 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:30,174 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:30,175 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:30,372 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:30,372 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:31,302 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:31,303 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:31,305 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:31,306 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:31,308 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:31,310 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:31,312 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:31,314 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:31,316 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:31,318 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:31,320 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:31,322 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:31,323 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:31,325 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:31,327 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:31,329 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:31,330 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:31,332 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:31,334 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:31,335 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:31,337 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:31,339 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:31,341 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:31,343 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:31,381 - python.options_data - INFO - Updated cache with partial data for SPY (6/29 dates)
2025-03-01 18:54:31,381 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:31,381 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:32,289 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:32,289 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:32,291 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:32,293 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:32,294 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:32,296 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:32,298 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:32,299 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:32,301 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:32,303 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:32,304 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:32,306 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:32,308 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:32,309 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:32,311 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:32,313 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:32,314 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:32,316 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:32,318 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:32,320 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:32,322 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:32,324 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:32,326 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:32,328 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:32,526 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:32,526 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 18:54:33,871 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 18:54:33,871 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 18:54:33,875 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 18:54:33,879 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 18:54:33,882 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 18:54:33,885 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 18:54:33,889 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 18:54:33,892 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 18:54:33,895 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 18:54:33,898 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 18:54:33,901 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 18:54:33,903 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 18:54:33,906 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 18:54:33,909 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 18:54:33,912 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 18:54:33,914 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 18:54:33,917 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 18:54:33,920 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 18:54:33,923 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 18:54:33,925 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 18:54:33,927 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 18:54:33,930 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 18:54:33,933 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 18:54:33,936 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 18:54:33,962 - python.options_data - INFO - Updated cache with partial data for SPY (7/29 dates)
2025-03-01 18:54:33,962 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 18:54:33,962 - python.options_data - INFO - Processing options data with current price: 594.18
```

### debug/logs/web_app.log
```
=== New session started at 2025-03-01 20:04:08 ===
2025-03-01 20:04:08,009 - __main__ - INFO - Starting Options Visualizer Web App
2025-03-01 20:04:08,009 - __main__ - INFO - Static folder: /Users/reevefrancis/repos/options_visualizer/options_visualizer_web/static
2025-03-01 20:04:08,009 - __main__ - INFO - Template folder: /Users/reevefrancis/repos/options_visualizer/options_visualizer_web/templates
2025-03-01 20:04:08,009 - python.options_data - INFO - Initializing OptionsDataManager with source=yahoo, model=market
2025-03-01 20:04:08,022 - werkzeug - WARNING -  * Debugger is active!
2025-03-01 20:04:08,026 - werkzeug - INFO -  * Debugger PIN: 797-671-465
2025-03-01 20:04:18,595 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:18] "GET / HTTP/1.1" 200 -
2025-03-01 20:04:18,608 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:18] "[36mGET /static/css/style.css HTTP/1.1[0m" 304 -
2025-03-01 20:04:18,609 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:18] "GET /static/js/main.js HTTP/1.1" 200 -
2025-03-01 20:04:18,632 - __main__ - INFO - Processing request for SPY
2025-03-01 20:04:18,632 - python.yahoo_finance - INFO - Fetching fresh data for ticker: SPY
2025-03-01 20:04:18,633 - python.options_data - INFO - Started background fetch for SPY
2025-03-01 20:04:18,633 - __main__ - INFO - Started background fetch for SPY
2025-03-01 20:04:18,633 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:18] "POST /api/get_options_data HTTP/1.1" 200 -
2025-03-01 20:04:19,220 - python.yahoo_finance - INFO - Got current price for SPY: 594.18
2025-03-01 20:04:19,329 - python.yahoo_finance - INFO - Found 29 expiration dates for SPY
2025-03-01 20:04:19,440 - python.yahoo_finance - INFO - Fetched 1/29 expiration dates for SPY
2025-03-01 20:04:19,440 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:19,440 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:19,608 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:19,608 - python.options_data - INFO - Starting 1D interpolation of missing values
2025-03-01 20:04:19,609 - python.options_data - INFO - 1D interpolated lastPrice for call at DTE=2
2025-03-01 20:04:19,609 - python.options_data - INFO - 1D interpolated bid for call at DTE=2
2025-03-01 20:04:19,610 - python.options_data - INFO - 1D interpolated ask for call at DTE=2
2025-03-01 20:04:19,610 - python.options_data - INFO - 1D interpolated change for call at DTE=2
2025-03-01 20:04:19,610 - python.options_data - INFO - 1D interpolated percentChange for call at DTE=2
2025-03-01 20:04:19,611 - python.options_data - INFO - 1D interpolated impliedVolatility for call at DTE=2
2025-03-01 20:04:19,611 - python.options_data - INFO - 1D interpolated inTheMoney for call at DTE=2
2025-03-01 20:04:19,611 - python.options_data - INFO - 1D interpolated spot for call at DTE=2
2025-03-01 20:04:19,611 - python.options_data - INFO - 1D interpolated price for call at DTE=2
2025-03-01 20:04:19,612 - python.options_data - INFO - 1D interpolated intrinsic_value for call at DTE=2
2025-03-01 20:04:19,612 - python.options_data - INFO - 1D interpolated extrinsic_value for call at DTE=2
2025-03-01 20:04:19,612 - python.options_data - INFO - 1D interpolated lastPrice for put at DTE=2
2025-03-01 20:04:19,613 - python.options_data - INFO - 1D interpolated bid for put at DTE=2
2025-03-01 20:04:19,613 - python.options_data - INFO - 1D interpolated ask for put at DTE=2
2025-03-01 20:04:19,613 - python.options_data - INFO - 1D interpolated change for put at DTE=2
2025-03-01 20:04:19,614 - python.options_data - INFO - 1D interpolated percentChange for put at DTE=2
2025-03-01 20:04:19,614 - python.options_data - INFO - 1D interpolated impliedVolatility for put at DTE=2
2025-03-01 20:04:19,614 - python.options_data - INFO - 1D interpolated inTheMoney for put at DTE=2
2025-03-01 20:04:19,614 - python.options_data - INFO - 1D interpolated spot for put at DTE=2
2025-03-01 20:04:19,615 - python.options_data - INFO - 1D interpolated price for put at DTE=2
2025-03-01 20:04:19,615 - python.options_data - INFO - 1D interpolated intrinsic_value for put at DTE=2
2025-03-01 20:04:19,615 - python.options_data - INFO - 1D interpolated extrinsic_value for put at DTE=2
2025-03-01 20:04:19,620 - python.options_data - ERROR - Error in background cache update: index 0 is out of bounds for axis 0 with size 0
2025-03-01 20:04:19,730 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:19,730 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:20,020 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:20,021 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:20,022 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:20,022 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:20,023 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:20,023 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:20,024 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:20,024 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:20,025 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:20,025 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:20,026 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:20,027 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:20,027 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:20,028 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:20,029 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:20,029 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:20,030 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:20,031 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:20,031 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:20,032 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:20,033 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:20,034 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:20,034 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:20,035 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:20,198 - python.options_data - INFO - Updated cache with partial data for SPY (2/29 dates)
2025-03-01 20:04:20,290 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:20,290 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:20,666 - __main__ - INFO - Processing request for SPY
2025-03-01 20:04:20,731 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:20,732 - __main__ - INFO - Returning partial data for SPY with 2 dates
2025-03-01 20:04:20,733 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:20,734 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:20] "POST /api/get_options_data HTTP/1.1" 200 -
2025-03-01 20:04:20,736 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:20,737 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:20,737 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:20,738 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:20,739 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:20,740 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:20,741 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:20,742 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:20,743 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:20,744 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:20,745 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:20,746 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:20,747 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:20,748 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:20,749 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:20,750 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:20,751 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:20,752 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:20,753 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:20,753 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:20,754 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:20,755 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:20,788 - python.options_data - INFO - Updated cache with partial data for SPY (3/29 dates)
2025-03-01 20:04:20,931 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:20,931 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:21,462 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:21,462 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:21,464 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:21,465 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:21,466 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:21,466 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:21,467 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:21,468 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:21,469 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:21,470 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:21,470 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:21,472 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:21,473 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:21,474 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:21,475 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:21,476 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:21,477 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:21,478 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:21,479 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:21,480 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:21,481 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:21,483 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:21,484 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:21,485 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:21,593 - python.options_data - INFO - Updated cache with partial data for SPY (4/29 dates)
2025-03-01 20:04:21,729 - python.yahoo_finance - INFO - Fetched 5/29 expiration dates for SPY
2025-03-01 20:04:21,729 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:21,729 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:22,452 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:22,452 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:22,454 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:22,455 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:22,457 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:22,459 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:22,460 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:22,461 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:22,463 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:22,465 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:22,466 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:22,468 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:22,469 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:22,471 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:22,472 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:22,473 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:22,475 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:22,476 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:22,478 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:22,479 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:22,480 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:22,482 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:22,484 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:22,485 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:22,530 - python.options_data - INFO - Updated cache with partial data for SPY (5/29 dates)
2025-03-01 20:04:22,695 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:22,695 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:23,633 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:23,634 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:23,636 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:23,637 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:23,639 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:23,641 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:23,643 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:23,645 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:23,647 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:23,649 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:23,650 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:23,652 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:23,654 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:23,655 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:23,658 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:23,659 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:23,661 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:23,663 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:23,665 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:23,667 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:23,669 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:23,670 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:23,672 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:23,674 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:23,738 - python.options_data - INFO - Updated cache with partial data for SPY (6/29 dates)
2025-03-01 20:04:23,894 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:23,894 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:25,240 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:25,241 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:25,244 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:25,247 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:25,250 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:25,253 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:25,256 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:25,259 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:25,262 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:25,265 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:25,267 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:25,270 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:25,273 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:25,276 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:25,278 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:25,281 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:25,284 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:25,286 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:25,289 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:25,291 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:25,294 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:25,297 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:25,299 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:25,302 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:25,359 - python.options_data - INFO - Updated cache with partial data for SPY (7/29 dates)
2025-03-01 20:04:25,494 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:25,494 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:27,045 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:27,046 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:27,049 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:27,052 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:27,055 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:27,059 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:27,062 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:27,065 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:27,068 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:27,070 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:27,073 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:27,076 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:27,079 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:27,082 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:27,085 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:27,087 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:27,090 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:27,093 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:27,096 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:27,099 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:27,101 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:27,104 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:27,106 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:27,109 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:27,147 - python.options_data - INFO - Updated cache with partial data for SPY (8/29 dates)
2025-03-01 20:04:27,388 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:27,388 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:29,358 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:29,358 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:29,363 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:29,367 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:29,371 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:29,375 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:29,379 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:29,383 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:29,386 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:29,390 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:29,394 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:29,398 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:29,401 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:29,405 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:29,409 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:29,412 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:29,416 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:29,419 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:29,423 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:29,427 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:29,431 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:29,434 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:29,438 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:29,441 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:29,495 - python.options_data - INFO - Updated cache with partial data for SPY (9/29 dates)
2025-03-01 20:04:29,613 - python.yahoo_finance - INFO - Fetched 10/29 expiration dates for SPY
2025-03-01 20:04:29,613 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:29,613 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:31,797 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:31,798 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:31,802 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:31,807 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:31,811 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:31,815 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:31,818 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:31,822 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:31,826 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:31,829 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:31,833 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:31,837 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:31,841 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:31,844 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:31,848 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:31,852 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:31,856 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:31,860 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:31,864 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:31,868 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:31,872 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:31,876 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:31,879 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:31,883 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:31,988 - python.options_data - INFO - Updated cache with partial data for SPY (10/29 dates)
2025-03-01 20:04:32,207 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:32,207 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:34,030 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:34] "GET / HTTP/1.1" 200 -
2025-03-01 20:04:34,080 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:34] "[36mGET /static/js/main.js HTTP/1.1[0m" 304 -
2025-03-01 20:04:34,098 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:34] "[36mGET /static/css/style.css HTTP/1.1[0m" 304 -
2025-03-01 20:04:34,138 - __main__ - INFO - Processing request for SPY
2025-03-01 20:04:34,476 - __main__ - INFO - Returning partial data for SPY with 10 dates
2025-03-01 20:04:34,517 - werkzeug - INFO - 127.0.0.1 - - [01/Mar/2025 20:04:34] "POST /api/get_options_data HTTP/1.1" 200 -
2025-03-01 20:04:34,852 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:34,853 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:34,858 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:34,864 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:34,869 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:34,874 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:34,879 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:34,883 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:34,889 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:34,893 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:34,898 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:34,903 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:34,908 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:34,913 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:34,917 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:34,922 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:34,926 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:34,931 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:34,936 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:34,941 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:34,945 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:34,950 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:34,955 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:34,959 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:35,003 - python.options_data - INFO - Updated cache with partial data for SPY (11/29 dates)
2025-03-01 20:04:35,162 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:35,162 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:38,086 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:38,086 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:38,092 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:38,098 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:38,104 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:38,109 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:38,114 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
2025-03-01 20:04:38,120 - python.options_data - INFO - 2D interpolated impliedVolatility for call using linear method
2025-03-01 20:04:38,125 - python.options_data - INFO - 2D interpolated inTheMoney for call using linear method
2025-03-01 20:04:38,131 - python.options_data - INFO - 2D interpolated spot for call using linear method
2025-03-01 20:04:38,137 - python.options_data - INFO - 2D interpolated price for call using linear method
2025-03-01 20:04:38,142 - python.options_data - INFO - 2D interpolated intrinsic_value for call using linear method
2025-03-01 20:04:38,147 - python.options_data - INFO - 2D interpolated extrinsic_value for call using linear method
2025-03-01 20:04:38,152 - python.options_data - INFO - 2D interpolated lastPrice for put using linear method
2025-03-01 20:04:38,158 - python.options_data - INFO - 2D interpolated bid for put using linear method
2025-03-01 20:04:38,163 - python.options_data - INFO - 2D interpolated ask for put using linear method
2025-03-01 20:04:38,168 - python.options_data - INFO - 2D interpolated change for put using linear method
2025-03-01 20:04:38,173 - python.options_data - INFO - 2D interpolated percentChange for put using linear method
2025-03-01 20:04:38,178 - python.options_data - INFO - 2D interpolated impliedVolatility for put using linear method
2025-03-01 20:04:38,183 - python.options_data - INFO - 2D interpolated inTheMoney for put using linear method
2025-03-01 20:04:38,188 - python.options_data - INFO - 2D interpolated spot for put using linear method
2025-03-01 20:04:38,193 - python.options_data - INFO - 2D interpolated price for put using linear method
2025-03-01 20:04:38,198 - python.options_data - INFO - 2D interpolated intrinsic_value for put using linear method
2025-03-01 20:04:38,203 - python.options_data - INFO - 2D interpolated extrinsic_value for put using linear method
2025-03-01 20:04:38,245 - python.options_data - INFO - Updated cache with partial data for SPY (12/29 dates)
2025-03-01 20:04:38,429 - python.options_data - INFO - Initializing OptionsDataProcessor with current_price: 594.18
2025-03-01 20:04:38,429 - python.options_data - INFO - Processing options data with current price: 594.18
2025-03-01 20:04:41,608 - python.options_data - INFO - Successfully processed options data into xarray Dataset
2025-03-01 20:04:41,608 - python.options_data - INFO - Starting 2D interpolation of missing values
2025-03-01 20:04:41,614 - python.options_data - INFO - 2D interpolated lastPrice for call using linear method
2025-03-01 20:04:41,620 - python.options_data - INFO - 2D interpolated bid for call using linear method
2025-03-01 20:04:41,626 - python.options_data - INFO - 2D interpolated ask for call using linear method
2025-03-01 20:04:41,632 - python.options_data - INFO - 2D interpolated change for call using linear method
2025-03-01 20:04:41,638 - python.options_data - INFO - 2D interpolated percentChange for call using linear method
```
